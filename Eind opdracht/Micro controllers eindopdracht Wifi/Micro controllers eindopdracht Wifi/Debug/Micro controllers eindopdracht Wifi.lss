
Micro controllers eindopdracht Wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800100  00000af8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014b7  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c50  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b7  00000000  00000000  00002f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000029c  00000000  00000000  0000382c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c6  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000418e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	87 c0       	rjmp	.+270    	; 0x114 <__vector_1>
   6:	00 00       	nop
   8:	94 c0       	rjmp	.+296    	; 0x132 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 37       	cpi	r26, 0x78	; 120
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	b2 d0       	rcall	.+356    	; 0x218 <main>
  b4:	1f c5       	rjmp	.+2622   	; 0xaf4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_togglePinE>:
	 LCD_writeByte(WRITE_COMMAND, 0x01);
	 LCD_writeByte(WRITE_COMMAND, 0x02);
}

static void LCD_togglePinE(void) {
	 PORTC |= EPIN;
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_togglePinE+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_togglePinE+0xc>
  c4:	00 00       	nop
	 _delay_ms(1);
	 PORTC &= (~(EPIN));
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_togglePinE+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_togglePinE+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <LCD_Command>:
	 _delay_ms(1);
}

static void LCD_Command(uint8_t data) {
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	 PORTC = ((data & 0xF0));
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	85 bb       	out	0x15, r24	; 21
	 LCD_togglePinE();
  de:	ec df       	rcall	.-40     	; 0xb8 <LCD_togglePinE>
	 
	 PORTC = ((data & 0x0F) << 4);
  e0:	20 e1       	ldi	r18, 0x10	; 16
  e2:	c2 9f       	mul	r28, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
	 LCD_togglePinE();
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	e6 df       	rcall	.-52     	; 0xb8 <LCD_togglePinE>
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <init>:
static void LCD_writeByte(uint8_t operation, uint8_t data);
static void LCD_4bit_mode();

void init(void) {
	 //opening for output
	 DDRC = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 bb       	out	0x14, r24	; 20
	 PORTC = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21
		 LCD_Data(data);
	 }
}

static void LCD_4bit_mode() {
	 PORTC = (0x02 << 4);
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	85 bb       	out	0x15, r24	; 21
	 PORTD = PORTC;
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	82 bb       	out	0x12, r24	; 18
	 LCD_togglePinE();
  fe:	dc df       	rcall	.-72     	; 0xb8 <LCD_togglePinE>
	 LCD_togglePinE();
}

static void LCD_writeByte(uint8_t operation, uint8_t data) {
	 if(operation == WRITE_COMMAND) {
		 LCD_Command(data);
 100:	88 e2       	ldi	r24, 0x28	; 40
 102:	e9 df       	rcall	.-46     	; 0xd6 <LCD_Command>
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	e7 df       	rcall	.-50     	; 0xd6 <LCD_Command>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	e5 df       	rcall	.-54     	; 0xd6 <LCD_Command>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	e3 df       	rcall	.-58     	; 0xd6 <LCD_Command>
	 
	 //go home
	 LCD_writeByte(WRITE_COMMAND, 0x02);
	 
	 //reset output
	 PORTC = 0x00;
 110:	15 ba       	out	0x15, r1	; 21
 112:	08 95       	ret

00000114 <__vector_1>:

char userLightAction = LIGHT_NO_ACTION;
static char HUE_GROUP_ON_JSON[]		= "{ \"on\": true }";
static char HUE_GROUP_OFF_JSON[]	= "{ \"on\": false }";
	
ISR(INT0_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	userLightAction = LIGHT_ON;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <userLightAction>
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_2>:

ISR(INT1_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
	userLightAction = LIGHT_OFF;
 13c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <userLightAction>
}
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <enableInterrupt>:

void enableInterrupt() {
	//setting external interrupt pins as input with pull up.
	DDRD	= 0x00;
 14a:	11 ba       	out	0x11, r1	; 17
	PORTD	= 0x03;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	82 bb       	out	0x12, r24	; 18
	
	//interrupts are rising edge and activated
	EICRA = 0x0F;
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x03;
 156:	89 bf       	out	0x39, r24	; 57
	sei();
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <combineHeaderWithData>:
}

void combineHeaderWithData(char *data, char *des, int size) {
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	da 95       	dec	r29
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	7b 01       	movw	r14, r22
	char headerWithData[256];
	sprintf(headerWithData, "%s%s%s%s%s%s%s%s%s%s%d%s%s", 
 17a:	9f 93       	push	r25
 17c:	8f 93       	push	r24
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	5f 93       	push	r21
 188:	4f 93       	push	r20
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	86 e3       	ldi	r24, 0x36	; 54
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9f 93       	push	r25
 198:	8f 93       	push	r24
 19a:	8e e4       	ldi	r24, 0x4E	; 78
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	9f 93       	push	r25
 1a0:	8f 93       	push	r24
 1a2:	89 e6       	ldi	r24, 0x69	; 105
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	9f 93       	push	r25
 1a8:	8f 93       	push	r24
 1aa:	86 e7       	ldi	r24, 0x76	; 118
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	9f 93       	push	r25
 1b0:	8f 93       	push	r24
 1b2:	8d e7       	ldi	r24, 0x7D	; 125
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	8e e9       	ldi	r24, 0x9E	; 158
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	87 eb       	ldi	r24, 0xB7	; 183
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	9f 93       	push	r25
 1c8:	8f 93       	push	r24
 1ca:	83 ec       	ldi	r24, 0xC3	; 195
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	9f 93       	push	r25
 1d0:	8f 93       	push	r24
 1d2:	8d ed       	ldi	r24, 0xDD	; 221
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	82 ee       	ldi	r24, 0xE2	; 226
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	9f 93       	push	r25
 1e0:	8f 93       	push	r24
 1e2:	8e 01       	movw	r16, r28
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	1f 93       	push	r17
 1ea:	0f 93       	push	r16
 1ec:	a8 d1       	rcall	.+848    	; 0x53e <sprintf>
	"Content-Type: application/json\r\n",
	"Host: ", HUE_IP, 
	"\r\nConnection: Keep-Alive\r\n",
	"Accept-Encoding: gzip\r\n",
	"Content-Length: ", size, "\r\n\r\n", data);
	des = strcpy(des, headerWithData);
 1ee:	b8 01       	movw	r22, r16
 1f0:	c7 01       	movw	r24, r14
 1f2:	9e d1       	rcall	.+828    	; 0x530 <strcpy>
}
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	d3 95       	inc	r29
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <main>:


int main(void) {
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	da 95       	dec	r29
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
	init();
 22c:	61 df       	rcall	.-318    	; 0xf0 <init>
	WifiInit();
 22e:	a8 d0       	rcall	.+336    	; 0x380 <WifiInit>
 230:	6d ef       	ldi	r22, 0xFD	; 253
	WifiConnectToAP(AP_SSID, AP_PASSWORD);
 232:	71 e0       	ldi	r23, 0x01	; 1
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	af d0       	rcall	.+350    	; 0x398 <WifiConnectToAP>
	enableInterrupt();
 23a:	87 df       	rcall	.-242    	; 0x14a <enableInterrupt>
 23c:	e0 e1       	ldi	r30, 0x10	; 16
	
 	char headerWithData[256];
 	combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	00 20       	and	r0, r0
 244:	e9 f7       	brne	.-6      	; 0x240 <main+0x28>
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	af 01       	movw	r20, r30
 24a:	40 51       	subi	r20, 0x10	; 16
 24c:	51 40       	sbci	r21, 0x01	; 1
 24e:	be 01       	movw	r22, r28
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	81 df       	rcall	.-254    	; 0x15c <combineHeaderWithData>
 25a:	02 e0       	ldi	r16, 0x02	; 2

    while (1) 
    {
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
 			userLightAction_shadowCopy = userLightAction;
 			userLightAction = LIGHT_NO_ACTION;
 25c:	0f 2e       	mov	r0, r31
 			if(userLightAction_shadowCopy == LIGHT_ON) {
 				combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 				WifiTcpSendData(headerWithData, strlen(headerWithData));
 			}
 			else {
 				combineHeaderWithData(HUE_GROUP_OFF_JSON, headerWithData, strlen(HUE_GROUP_OFF_JSON));
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	cf 2e       	mov	r12, r31
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	df 2e       	mov	r13, r31
 266:	f0 2d       	mov	r31, r0
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	7c 01       	movw	r14, r24
 26e:	0f 2e       	mov	r0, r31
 		}
 		
 		if(userLightAction_shadowCopy != LIGHT_NO_ACTION) {
 			WifiTcpConnect(HUE_IP, HUE_PORT);
 			if(userLightAction_shadowCopy == LIGHT_ON) {
 				combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 270:	f0 e1       	ldi	r31, 0x10	; 16
 272:	af 2e       	mov	r10, r31
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	bf 2e       	mov	r11, r31
 278:	f0 2d       	mov	r31, r0
 27a:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 27c:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <userLightAction>
 	char userLightAction_shadowCopy;

    while (1) 
    {
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
 			userLightAction_shadowCopy = userLightAction;
 280:	00 93 1f 01 	sts	0x011F, r16	; 0x80011f <userLightAction>
 			userLightAction = LIGHT_NO_ACTION;
 284:	78 94       	sei
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 286:	12 30       	cpi	r17, 0x02	; 2
 		}
 		
 		if(userLightAction_shadowCopy != LIGHT_NO_ACTION) {
 288:	99 f1       	breq	.+102    	; 0x2f0 <main+0xd8>
 			WifiTcpConnect(HUE_IP, HUE_PORT);
 28a:	60 e5       	ldi	r22, 0x50	; 80
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	89 e6       	ldi	r24, 0x69	; 105
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	c0 d0       	rcall	.+384    	; 0x414 <WifiTcpConnect>
 294:	11 30       	cpi	r17, 0x01	; 1
 			if(userLightAction_shadowCopy == LIGHT_ON) {
 296:	b1 f4       	brne	.+44     	; 0x2c4 <main+0xac>
 298:	f5 01       	movw	r30, r10
 				combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 29a:	01 90       	ld	r0, Z+
 29c:	00 20       	and	r0, r0
 29e:	e9 f7       	brne	.-6      	; 0x29a <main+0x82>
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	af 01       	movw	r20, r30
 2a4:	40 51       	subi	r20, 0x10	; 16
 2a6:	51 40       	sbci	r21, 0x01	; 1
 2a8:	b7 01       	movw	r22, r14
 2aa:	c5 01       	movw	r24, r10
 2ac:	57 df       	rcall	.-338    	; 0x15c <combineHeaderWithData>
 2ae:	f7 01       	movw	r30, r14
 				WifiTcpSendData(headerWithData, strlen(headerWithData));
 2b0:	01 90       	ld	r0, Z+
 2b2:	00 20       	and	r0, r0
 2b4:	e9 f7       	brne	.-6      	; 0x2b0 <main+0x98>
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	bf 01       	movw	r22, r30
 2ba:	6e 19       	sub	r22, r14
 2bc:	7f 09       	sbc	r23, r15
 2be:	c7 01       	movw	r24, r14
 2c0:	dc d0       	rcall	.+440    	; 0x47a <WifiTcpSendData>
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <main+0xd6>
 2c4:	f6 01       	movw	r30, r12
 			}
 			else {
 				combineHeaderWithData(HUE_GROUP_OFF_JSON, headerWithData, strlen(HUE_GROUP_OFF_JSON));
 2c6:	01 90       	ld	r0, Z+
 2c8:	00 20       	and	r0, r0
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <main+0xae>
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	af 01       	movw	r20, r30
 2d0:	40 50       	subi	r20, 0x00	; 0
 2d2:	51 40       	sbci	r21, 0x01	; 1
 2d4:	b7 01       	movw	r22, r14
 2d6:	c6 01       	movw	r24, r12
 2d8:	41 df       	rcall	.-382    	; 0x15c <combineHeaderWithData>
 2da:	f7 01       	movw	r30, r14
 				WifiTcpSendData(headerWithData, strlen(headerWithData));
 2dc:	01 90       	ld	r0, Z+
 2de:	00 20       	and	r0, r0
 2e0:	e9 f7       	brne	.-6      	; 0x2dc <main+0xc4>
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	bf 01       	movw	r22, r30
 2e6:	6e 19       	sub	r22, r14
 2e8:	7f 09       	sbc	r23, r15
 2ea:	c7 01       	movw	r24, r14
 2ec:	c6 d0       	rcall	.+396    	; 0x47a <WifiTcpSendData>
 			}
 			WifiTcpClose();
 2ee:	11 d1       	rcall	.+546    	; 0x512 <WifiTcpClose>
 2f0:	85 b7       	in	r24, 0x35	; 53
 		}
 		//go in sleep
 		sleep_mode();
 2f2:	80 62       	ori	r24, 0x20	; 32
 2f4:	85 bf       	out	0x35, r24	; 53
 2f6:	88 95       	sleep
 2f8:	85 b7       	in	r24, 0x35	; 53
 2fa:	8f 7d       	andi	r24, 0xDF	; 223
 2fc:	85 bf       	out	0x35, r24	; 53
 2fe:	bd cf       	rjmp	.-134    	; 0x27a <main+0x62>

00000300 <wait>:
void WifiTest(void);
void WifiWriteChar(unsigned char);
unsigned char WifiReadChar(void);

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
 300:	18 16       	cp	r1, r24
 302:	19 06       	cpc	r1, r25
 304:	6c f4       	brge	.+26     	; 0x320 <wait+0x20>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	ef ec       	ldi	r30, 0xCF	; 207
 30c:	f7 e0       	ldi	r31, 0x07	; 7
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <wait+0xe>
 312:	00 c0       	rjmp	.+0      	; 0x314 <wait+0x14>
 314:	00 00       	nop
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	82 17       	cp	r24, r18
 31c:	93 07       	cpc	r25, r19
 31e:	a9 f7       	brne	.-22     	; 0x30a <wait+0xa>
 320:	08 95       	ret

00000322 <WifiWriteChar>:
	}
	wait(100);
}

void WifiWriteChar(unsigned char commandByte) {
	while(!(UCSR0A & (1<<UDRE0)));
 322:	5d 9b       	sbis	0x0b, 5	; 11
 324:	fe cf       	rjmp	.-4      	; 0x322 <WifiWriteChar>
	UDR0 = commandByte;
 326:	8c b9       	out	0x0c, r24	; 12
 328:	08 95       	ret

0000032a <WifiTest>:
	UCSR0A = 0x00;
	
	WifiTest();
}

void WifiTest(void) {
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <WifiTest+0xa>
 334:	00 d0       	rcall	.+0      	; 0x336 <WifiTest+0xc>
 336:	1f 92       	push	r1
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	char ATCommand[] = "AT\r\n";
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	ed e1       	ldi	r30, 0x1D	; 29
 340:	f2 e0       	ldi	r31, 0x02	; 2
 342:	de 01       	movw	r26, r28
 344:	11 96       	adiw	r26, 0x01	; 1
 346:	01 90       	ld	r0, Z+
 348:	0d 92       	st	X+, r0
 34a:	8a 95       	dec	r24
 34c:	e1 f7       	brne	.-8      	; 0x346 <WifiTest+0x1c>
	
	int i = 0;
	while(ATCommand[i] != '\0') {
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	88 23       	and	r24, r24
 352:	49 f0       	breq	.+18     	; 0x366 <WifiTest+0x3c>
 354:	8e 01       	movw	r16, r28
 356:	0e 5f       	subi	r16, 0xFE	; 254
 358:	1f 4f       	sbci	r17, 0xFF	; 255
		unsigned char dataToSend = ATCommand[i];
		WifiWriteChar(dataToSend);
 35a:	e3 df       	rcall	.-58     	; 0x322 <WifiWriteChar>

void WifiTest(void) {
	char ATCommand[] = "AT\r\n";
	
	int i = 0;
	while(ATCommand[i] != '\0') {
 35c:	f8 01       	movw	r30, r16
 35e:	81 91       	ld	r24, Z+
 360:	8f 01       	movw	r16, r30
 362:	81 11       	cpse	r24, r1
 364:	fa cf       	rjmp	.-12     	; 0x35a <WifiTest+0x30>
		unsigned char dataToSend = ATCommand[i];
		WifiWriteChar(dataToSend);
		i++;
	}
	wait(1000);
 366:	88 ee       	ldi	r24, 0xE8	; 232
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	ca df       	rcall	.-108    	; 0x300 <wait>
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <WifiInit>:
	}
}

void WifiInit(void) {
	int baud = REGBAUD;
	UBRR0H = (baud>>8);		//highest 4 bits of the baudrate
 380:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = baud;			//lowest byte of the baudrate
 384:	83 e3       	ldi	r24, 0x33	; 51
 386:	89 b9       	out	0x09, r24	; 9

	UCSR0C = 0x06;			//asychroon 8bits en no parity ingesteld.
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UCSR0B = 0x0C;			//enable TX en RX
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0x00;
 392:	1b b8       	out	0x0b, r1	; 11
	
	WifiTest();
 394:	ca cf       	rjmp	.-108    	; 0x32a <WifiTest>
 396:	08 95       	ret

00000398 <WifiConnectToAP>:
		i++;
	}
	wait(1000);
}

void WifiConnectToAP(char *SSID, char *password) {
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	c0 55       	subi	r28, 0x50	; 80
 3a6:	d1 09       	sbc	r29, r1
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
	char APCommand[80];
	sprintf(APCommand, "%s\"%s\",\"%s\"\r\n", "AT+CWJAP=", SSID, password);
 3b2:	7f 93       	push	r23
 3b4:	6f 93       	push	r22
 3b6:	9f 93       	push	r25
 3b8:	8f 93       	push	r24
 3ba:	82 e2       	ldi	r24, 0x22	; 34
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	8c e2       	ldi	r24, 0x2C	; 44
 3c4:	92 e0       	ldi	r25, 0x02	; 2
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	9f 93       	push	r25
 3d0:	8f 93       	push	r24
 3d2:	b5 d0       	rcall	.+362    	; 0x53e <sprintf>

	int i = 0;
	while(APCommand[i] != '\0') {
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	88 23       	and	r24, r24
 3e2:	49 f0       	breq	.+18     	; 0x3f6 <WifiConnectToAP+0x5e>
 3e4:	8e 01       	movw	r16, r28
 3e6:	0e 5f       	subi	r16, 0xFE	; 254
		unsigned char dataToSend = APCommand[i];
		WifiWriteChar(dataToSend);
 3e8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ea:	9b df       	rcall	.-202    	; 0x322 <WifiWriteChar>
void WifiConnectToAP(char *SSID, char *password) {
	char APCommand[80];
	sprintf(APCommand, "%s\"%s\",\"%s\"\r\n", "AT+CWJAP=", SSID, password);

	int i = 0;
	while(APCommand[i] != '\0') {
 3ec:	f8 01       	movw	r30, r16
 3ee:	81 91       	ld	r24, Z+
 3f0:	8f 01       	movw	r16, r30
 3f2:	81 11       	cpse	r24, r1
 3f4:	fa cf       	rjmp	.-12     	; 0x3ea <WifiConnectToAP+0x52>
		unsigned char dataToSend = APCommand[i];
		WifiWriteChar(dataToSend);
		i++;
	}
	wait(10000);
 3f6:	80 e1       	ldi	r24, 0x10	; 16
 3f8:	97 e2       	ldi	r25, 0x27	; 39
 3fa:	82 df       	rcall	.-252    	; 0x300 <wait>
}
 3fc:	c0 5b       	subi	r28, 0xB0	; 176
 3fe:	df 4f       	sbci	r29, 0xFF	; 255
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <WifiTcpConnect>:

void WifiTcpConnect(char *IP, int port) {
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	e2 97       	sbiw	r28, 0x32	; 50
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
	char tcpStartCommand[50];
	sprintf(tcpStartCommand, "%s,%s,%d\r\n", "AT+CIPSTART=\"TCP\"", IP, port);
 428:	7f 93       	push	r23
 42a:	6f 93       	push	r22
 42c:	9f 93       	push	r25
 42e:	8f 93       	push	r24
 430:	8a e3       	ldi	r24, 0x3A	; 58
 432:	92 e0       	ldi	r25, 0x02	; 2
 434:	9f 93       	push	r25
 436:	8f 93       	push	r24
 438:	8c e4       	ldi	r24, 0x4C	; 76
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	9f 93       	push	r25
 446:	8f 93       	push	r24
 448:	7a d0       	rcall	.+244    	; 0x53e <sprintf>
	
	int i = 0;
	while(tcpStartCommand[i] != '\0') {
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	88 23       	and	r24, r24
		WifiWriteChar(tcpStartCommand[i]);
 458:	21 f0       	breq	.+8      	; 0x462 <WifiTcpConnect+0x4e>
 45a:	63 df       	rcall	.-314    	; 0x322 <WifiWriteChar>
void WifiTcpConnect(char *IP, int port) {
	char tcpStartCommand[50];
	sprintf(tcpStartCommand, "%s,%s,%d\r\n", "AT+CIPSTART=\"TCP\"", IP, port);
	
	int i = 0;
	while(tcpStartCommand[i] != '\0') {
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	81 11       	cpse	r24, r1
 460:	fc cf       	rjmp	.-8      	; 0x45a <WifiTcpConnect+0x46>
		WifiWriteChar(tcpStartCommand[i]);
	}
	wait(250);
 462:	8a ef       	ldi	r24, 0xFA	; 250
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	4c df       	rcall	.-360    	; 0x300 <wait>
}
 468:	e2 96       	adiw	r28, 0x32	; 50
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <WifiTcpSendData>:

void WifiTcpSendData(char *data, int size) {
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	62 97       	sbiw	r28, 0x12	; 18
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	7c 01       	movw	r14, r24
	int i = 0;
	char tcpSendDataCommand[18];
	
	sprintf(tcpSendDataCommand, "%s%d\r\n", "AT+CIPSEND=", size);
 498:	7f 93       	push	r23
 49a:	6f 93       	push	r22
 49c:	87 e5       	ldi	r24, 0x57	; 87
 49e:	92 e0       	ldi	r25, 0x02	; 2
 4a0:	9f 93       	push	r25
 4a2:	8f 93       	push	r24
 4a4:	83 e6       	ldi	r24, 0x63	; 99
 4a6:	92 e0       	ldi	r25, 0x02	; 2
 4a8:	9f 93       	push	r25
 4aa:	8f 93       	push	r24
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	9f 93       	push	r25
 4b2:	8f 93       	push	r24
 4b4:	44 d0       	rcall	.+136    	; 0x53e <sprintf>
	
	
	while(tcpSendDataCommand[i] != '\0') {
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	88 23       	and	r24, r24
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <WifiTcpSendData+0x5e>
 4c6:	8e 01       	movw	r16, r28
 4c8:	0e 5f       	subi	r16, 0xFE	; 254
		WifiWriteChar(tcpSendDataCommand[i]);
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255
 4cc:	2a df       	rcall	.-428    	; 0x322 <WifiWriteChar>
	char tcpSendDataCommand[18];
	
	sprintf(tcpSendDataCommand, "%s%d\r\n", "AT+CIPSEND=", size);
	
	
	while(tcpSendDataCommand[i] != '\0') {
 4ce:	f8 01       	movw	r30, r16
 4d0:	81 91       	ld	r24, Z+
 4d2:	8f 01       	movw	r16, r30
 4d4:	81 11       	cpse	r24, r1
 4d6:	fa cf       	rjmp	.-12     	; 0x4cc <WifiTcpSendData+0x52>
		WifiWriteChar(tcpSendDataCommand[i]);
		i++;
	}
	
	i = 0;
	while(data[i] != '\0') {
 4d8:	f7 01       	movw	r30, r14
 4da:	80 81       	ld	r24, Z
 4dc:	88 23       	and	r24, r24
 4de:	49 f0       	breq	.+18     	; 0x4f2 <WifiTcpSendData+0x78>
 4e0:	87 01       	movw	r16, r14
 4e2:	0f 5f       	subi	r16, 0xFF	; 255
		WifiWriteChar(data[i]);
 4e4:	1f 4f       	sbci	r17, 0xFF	; 255
 4e6:	1d df       	rcall	.-454    	; 0x322 <WifiWriteChar>
		WifiWriteChar(tcpSendDataCommand[i]);
		i++;
	}
	
	i = 0;
	while(data[i] != '\0') {
 4e8:	f8 01       	movw	r30, r16
 4ea:	81 91       	ld	r24, Z+
 4ec:	8f 01       	movw	r16, r30
 4ee:	81 11       	cpse	r24, r1
		WifiWriteChar(data[i]);
		i++;
	}
	wait(250);
 4f0:	fa cf       	rjmp	.-12     	; 0x4e6 <WifiTcpSendData+0x6c>
 4f2:	8a ef       	ldi	r24, 0xFA	; 250
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	04 df       	rcall	.-504    	; 0x300 <wait>
}
 4f8:	62 96       	adiw	r28, 0x12	; 18
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	08 95       	ret

00000512 <WifiTcpClose>:

void WifiTcpClose() {
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cb e6       	ldi	r28, 0x6B	; 107
 518:	d2 e0       	ldi	r29, 0x02	; 2
 51a:	81 e4       	ldi	r24, 0x41	; 65
	char *tcpCloseCommand = "AT+CIPCLOSE\r\n";
		
	for(;*tcpCloseCommand; tcpCloseCommand++) {
		WifiWriteChar(*tcpCloseCommand);
 51c:	02 df       	rcall	.-508    	; 0x322 <WifiWriteChar>
}

void WifiTcpClose() {
	char *tcpCloseCommand = "AT+CIPCLOSE\r\n";
		
	for(;*tcpCloseCommand; tcpCloseCommand++) {
 51e:	89 91       	ld	r24, Y+
 520:	81 11       	cpse	r24, r1
 522:	fc cf       	rjmp	.-8      	; 0x51c <WifiTcpClose+0xa>
		WifiWriteChar(*tcpCloseCommand);
	}
	wait(100);
 524:	84 e6       	ldi	r24, 0x64	; 100
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	eb de       	rcall	.-554    	; 0x300 <wait>
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <strcpy>:
 530:	fb 01       	movw	r30, r22
 532:	dc 01       	movw	r26, r24
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	00 20       	and	r0, r0
 53a:	e1 f7       	brne	.-8      	; 0x534 <strcpy+0x4>
 53c:	08 95       	ret

0000053e <sprintf>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	2e 97       	sbiw	r28, 0x0e	; 14
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
 556:	0d 89       	ldd	r16, Y+21	; 0x15
 558:	1e 89       	ldd	r17, Y+22	; 0x16
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	8c 83       	std	Y+4, r24	; 0x04
 55e:	1a 83       	std	Y+2, r17	; 0x02
 560:	09 83       	std	Y+1, r16	; 0x01
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	9f e7       	ldi	r25, 0x7F	; 127
 566:	9e 83       	std	Y+6, r25	; 0x06
 568:	8d 83       	std	Y+5, r24	; 0x05
 56a:	ae 01       	movw	r20, r28
 56c:	47 5e       	subi	r20, 0xE7	; 231
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	6f 89       	ldd	r22, Y+23	; 0x17
 572:	78 8d       	ldd	r23, Y+24	; 0x18
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	10 d0       	rcall	.+32     	; 0x59a <vfprintf>
 57a:	ef 81       	ldd	r30, Y+7	; 0x07
 57c:	f8 85       	ldd	r31, Y+8	; 0x08
 57e:	e0 0f       	add	r30, r16
 580:	f1 1f       	adc	r31, r17
 582:	10 82       	st	Z, r1
 584:	2e 96       	adiw	r28, 0x0e	; 14
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <vfprintf>:
 59a:	2f 92       	push	r2
 59c:	3f 92       	push	r3
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2b 97       	sbiw	r28, 0x0b	; 11
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	6c 01       	movw	r12, r24
 5d0:	7b 01       	movw	r14, r22
 5d2:	8a 01       	movw	r16, r20
 5d4:	fc 01       	movw	r30, r24
 5d6:	17 82       	std	Z+7, r1	; 0x07
 5d8:	16 82       	std	Z+6, r1	; 0x06
 5da:	83 81       	ldd	r24, Z+3	; 0x03
 5dc:	81 ff       	sbrs	r24, 1
 5de:	bf c1       	rjmp	.+894    	; 0x95e <vfprintf+0x3c4>
 5e0:	ce 01       	movw	r24, r28
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	3c 01       	movw	r6, r24
 5e6:	f6 01       	movw	r30, r12
 5e8:	93 81       	ldd	r25, Z+3	; 0x03
 5ea:	f7 01       	movw	r30, r14
 5ec:	93 fd       	sbrc	r25, 3
 5ee:	85 91       	lpm	r24, Z+
 5f0:	93 ff       	sbrs	r25, 3
 5f2:	81 91       	ld	r24, Z+
 5f4:	7f 01       	movw	r14, r30
 5f6:	88 23       	and	r24, r24
 5f8:	09 f4       	brne	.+2      	; 0x5fc <vfprintf+0x62>
 5fa:	ad c1       	rjmp	.+858    	; 0x956 <vfprintf+0x3bc>
 5fc:	85 32       	cpi	r24, 0x25	; 37
 5fe:	39 f4       	brne	.+14     	; 0x60e <vfprintf+0x74>
 600:	93 fd       	sbrc	r25, 3
 602:	85 91       	lpm	r24, Z+
 604:	93 ff       	sbrs	r25, 3
 606:	81 91       	ld	r24, Z+
 608:	7f 01       	movw	r14, r30
 60a:	85 32       	cpi	r24, 0x25	; 37
 60c:	21 f4       	brne	.+8      	; 0x616 <vfprintf+0x7c>
 60e:	b6 01       	movw	r22, r12
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	d6 d1       	rcall	.+940    	; 0x9c0 <fputc>
 614:	e8 cf       	rjmp	.-48     	; 0x5e6 <vfprintf+0x4c>
 616:	91 2c       	mov	r9, r1
 618:	21 2c       	mov	r2, r1
 61a:	31 2c       	mov	r3, r1
 61c:	ff e1       	ldi	r31, 0x1F	; 31
 61e:	f3 15       	cp	r31, r3
 620:	d8 f0       	brcs	.+54     	; 0x658 <vfprintf+0xbe>
 622:	8b 32       	cpi	r24, 0x2B	; 43
 624:	79 f0       	breq	.+30     	; 0x644 <vfprintf+0xaa>
 626:	38 f4       	brcc	.+14     	; 0x636 <vfprintf+0x9c>
 628:	80 32       	cpi	r24, 0x20	; 32
 62a:	79 f0       	breq	.+30     	; 0x64a <vfprintf+0xb0>
 62c:	83 32       	cpi	r24, 0x23	; 35
 62e:	a1 f4       	brne	.+40     	; 0x658 <vfprintf+0xbe>
 630:	23 2d       	mov	r18, r3
 632:	20 61       	ori	r18, 0x10	; 16
 634:	1d c0       	rjmp	.+58     	; 0x670 <vfprintf+0xd6>
 636:	8d 32       	cpi	r24, 0x2D	; 45
 638:	61 f0       	breq	.+24     	; 0x652 <vfprintf+0xb8>
 63a:	80 33       	cpi	r24, 0x30	; 48
 63c:	69 f4       	brne	.+26     	; 0x658 <vfprintf+0xbe>
 63e:	23 2d       	mov	r18, r3
 640:	21 60       	ori	r18, 0x01	; 1
 642:	16 c0       	rjmp	.+44     	; 0x670 <vfprintf+0xd6>
 644:	83 2d       	mov	r24, r3
 646:	82 60       	ori	r24, 0x02	; 2
 648:	38 2e       	mov	r3, r24
 64a:	e3 2d       	mov	r30, r3
 64c:	e4 60       	ori	r30, 0x04	; 4
 64e:	3e 2e       	mov	r3, r30
 650:	2a c0       	rjmp	.+84     	; 0x6a6 <vfprintf+0x10c>
 652:	f3 2d       	mov	r31, r3
 654:	f8 60       	ori	r31, 0x08	; 8
 656:	1d c0       	rjmp	.+58     	; 0x692 <vfprintf+0xf8>
 658:	37 fc       	sbrc	r3, 7
 65a:	2d c0       	rjmp	.+90     	; 0x6b6 <vfprintf+0x11c>
 65c:	20 ed       	ldi	r18, 0xD0	; 208
 65e:	28 0f       	add	r18, r24
 660:	2a 30       	cpi	r18, 0x0A	; 10
 662:	40 f0       	brcs	.+16     	; 0x674 <vfprintf+0xda>
 664:	8e 32       	cpi	r24, 0x2E	; 46
 666:	b9 f4       	brne	.+46     	; 0x696 <vfprintf+0xfc>
 668:	36 fc       	sbrc	r3, 6
 66a:	75 c1       	rjmp	.+746    	; 0x956 <vfprintf+0x3bc>
 66c:	23 2d       	mov	r18, r3
 66e:	20 64       	ori	r18, 0x40	; 64
 670:	32 2e       	mov	r3, r18
 672:	19 c0       	rjmp	.+50     	; 0x6a6 <vfprintf+0x10c>
 674:	36 fe       	sbrs	r3, 6
 676:	06 c0       	rjmp	.+12     	; 0x684 <vfprintf+0xea>
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	98 9e       	mul	r9, r24
 67c:	20 0d       	add	r18, r0
 67e:	11 24       	eor	r1, r1
 680:	92 2e       	mov	r9, r18
 682:	11 c0       	rjmp	.+34     	; 0x6a6 <vfprintf+0x10c>
 684:	ea e0       	ldi	r30, 0x0A	; 10
 686:	2e 9e       	mul	r2, r30
 688:	20 0d       	add	r18, r0
 68a:	11 24       	eor	r1, r1
 68c:	22 2e       	mov	r2, r18
 68e:	f3 2d       	mov	r31, r3
 690:	f0 62       	ori	r31, 0x20	; 32
 692:	3f 2e       	mov	r3, r31
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <vfprintf+0x10c>
 696:	8c 36       	cpi	r24, 0x6C	; 108
 698:	21 f4       	brne	.+8      	; 0x6a2 <vfprintf+0x108>
 69a:	83 2d       	mov	r24, r3
 69c:	80 68       	ori	r24, 0x80	; 128
 69e:	38 2e       	mov	r3, r24
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <vfprintf+0x10c>
 6a2:	88 36       	cpi	r24, 0x68	; 104
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <vfprintf+0x11c>
 6a6:	f7 01       	movw	r30, r14
 6a8:	93 fd       	sbrc	r25, 3
 6aa:	85 91       	lpm	r24, Z+
 6ac:	93 ff       	sbrs	r25, 3
 6ae:	81 91       	ld	r24, Z+
 6b0:	7f 01       	movw	r14, r30
 6b2:	81 11       	cpse	r24, r1
 6b4:	b3 cf       	rjmp	.-154    	; 0x61c <vfprintf+0x82>
 6b6:	98 2f       	mov	r25, r24
 6b8:	9f 7d       	andi	r25, 0xDF	; 223
 6ba:	95 54       	subi	r25, 0x45	; 69
 6bc:	93 30       	cpi	r25, 0x03	; 3
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0x130>
 6c0:	0c 5f       	subi	r16, 0xFC	; 252
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	9f e3       	ldi	r25, 0x3F	; 63
 6c6:	99 83       	std	Y+1, r25	; 0x01
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <vfprintf+0x14a>
 6ca:	83 36       	cpi	r24, 0x63	; 99
 6cc:	31 f0       	breq	.+12     	; 0x6da <vfprintf+0x140>
 6ce:	83 37       	cpi	r24, 0x73	; 115
 6d0:	71 f0       	breq	.+28     	; 0x6ee <vfprintf+0x154>
 6d2:	83 35       	cpi	r24, 0x53	; 83
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <vfprintf+0x13e>
 6d6:	55 c0       	rjmp	.+170    	; 0x782 <vfprintf+0x1e8>
 6d8:	20 c0       	rjmp	.+64     	; 0x71a <vfprintf+0x180>
 6da:	f8 01       	movw	r30, r16
 6dc:	80 81       	ld	r24, Z
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	0e 5f       	subi	r16, 0xFE	; 254
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	88 24       	eor	r8, r8
 6e6:	83 94       	inc	r8
 6e8:	91 2c       	mov	r9, r1
 6ea:	53 01       	movw	r10, r6
 6ec:	12 c0       	rjmp	.+36     	; 0x712 <vfprintf+0x178>
 6ee:	28 01       	movw	r4, r16
 6f0:	f2 e0       	ldi	r31, 0x02	; 2
 6f2:	4f 0e       	add	r4, r31
 6f4:	51 1c       	adc	r5, r1
 6f6:	f8 01       	movw	r30, r16
 6f8:	a0 80       	ld	r10, Z
 6fa:	b1 80       	ldd	r11, Z+1	; 0x01
 6fc:	36 fe       	sbrs	r3, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <vfprintf+0x16c>
 700:	69 2d       	mov	r22, r9
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x170>
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	7f ef       	ldi	r23, 0xFF	; 255
 70a:	c5 01       	movw	r24, r10
 70c:	4e d1       	rcall	.+668    	; 0x9aa <strnlen>
 70e:	4c 01       	movw	r8, r24
 710:	82 01       	movw	r16, r4
 712:	f3 2d       	mov	r31, r3
 714:	ff 77       	andi	r31, 0x7F	; 127
 716:	3f 2e       	mov	r3, r31
 718:	15 c0       	rjmp	.+42     	; 0x744 <vfprintf+0x1aa>
 71a:	28 01       	movw	r4, r16
 71c:	22 e0       	ldi	r18, 0x02	; 2
 71e:	42 0e       	add	r4, r18
 720:	51 1c       	adc	r5, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	36 fe       	sbrs	r3, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x198>
 72c:	69 2d       	mov	r22, r9
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x19c>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	2d d1       	rcall	.+602    	; 0x994 <strnlen_P>
 73a:	4c 01       	movw	r8, r24
 73c:	f3 2d       	mov	r31, r3
 73e:	f0 68       	ori	r31, 0x80	; 128
 740:	3f 2e       	mov	r3, r31
 742:	82 01       	movw	r16, r4
 744:	33 fc       	sbrc	r3, 3
 746:	19 c0       	rjmp	.+50     	; 0x77a <vfprintf+0x1e0>
 748:	82 2d       	mov	r24, r2
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	88 16       	cp	r8, r24
 74e:	99 06       	cpc	r9, r25
 750:	a0 f4       	brcc	.+40     	; 0x77a <vfprintf+0x1e0>
 752:	b6 01       	movw	r22, r12
 754:	80 e2       	ldi	r24, 0x20	; 32
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	33 d1       	rcall	.+614    	; 0x9c0 <fputc>
 75a:	2a 94       	dec	r2
 75c:	f5 cf       	rjmp	.-22     	; 0x748 <vfprintf+0x1ae>
 75e:	f5 01       	movw	r30, r10
 760:	37 fc       	sbrc	r3, 7
 762:	85 91       	lpm	r24, Z+
 764:	37 fe       	sbrs	r3, 7
 766:	81 91       	ld	r24, Z+
 768:	5f 01       	movw	r10, r30
 76a:	b6 01       	movw	r22, r12
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	28 d1       	rcall	.+592    	; 0x9c0 <fputc>
 770:	21 10       	cpse	r2, r1
 772:	2a 94       	dec	r2
 774:	21 e0       	ldi	r18, 0x01	; 1
 776:	82 1a       	sub	r8, r18
 778:	91 08       	sbc	r9, r1
 77a:	81 14       	cp	r8, r1
 77c:	91 04       	cpc	r9, r1
 77e:	79 f7       	brne	.-34     	; 0x75e <vfprintf+0x1c4>
 780:	e1 c0       	rjmp	.+450    	; 0x944 <vfprintf+0x3aa>
 782:	84 36       	cpi	r24, 0x64	; 100
 784:	11 f0       	breq	.+4      	; 0x78a <vfprintf+0x1f0>
 786:	89 36       	cpi	r24, 0x69	; 105
 788:	39 f5       	brne	.+78     	; 0x7d8 <vfprintf+0x23e>
 78a:	f8 01       	movw	r30, r16
 78c:	37 fe       	sbrs	r3, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x204>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <vfprintf+0x214>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	07 2e       	mov	r0, r23
 7a4:	00 0c       	add	r0, r0
 7a6:	88 0b       	sbc	r24, r24
 7a8:	99 0b       	sbc	r25, r25
 7aa:	0e 5f       	subi	r16, 0xFE	; 254
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	f3 2d       	mov	r31, r3
 7b0:	ff 76       	andi	r31, 0x6F	; 111
 7b2:	3f 2e       	mov	r3, r31
 7b4:	97 ff       	sbrs	r25, 7
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x230>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	f0 68       	ori	r31, 0x80	; 128
 7c8:	3f 2e       	mov	r3, r31
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	a3 01       	movw	r20, r6
 7d0:	33 d1       	rcall	.+614    	; 0xa38 <__ultoa_invert>
 7d2:	88 2e       	mov	r8, r24
 7d4:	86 18       	sub	r8, r6
 7d6:	44 c0       	rjmp	.+136    	; 0x860 <vfprintf+0x2c6>
 7d8:	85 37       	cpi	r24, 0x75	; 117
 7da:	31 f4       	brne	.+12     	; 0x7e8 <vfprintf+0x24e>
 7dc:	23 2d       	mov	r18, r3
 7de:	2f 7e       	andi	r18, 0xEF	; 239
 7e0:	b2 2e       	mov	r11, r18
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <vfprintf+0x298>
 7e8:	93 2d       	mov	r25, r3
 7ea:	99 7f       	andi	r25, 0xF9	; 249
 7ec:	b9 2e       	mov	r11, r25
 7ee:	8f 36       	cpi	r24, 0x6F	; 111
 7f0:	c1 f0       	breq	.+48     	; 0x822 <vfprintf+0x288>
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <vfprintf+0x260>
 7f4:	88 35       	cpi	r24, 0x58	; 88
 7f6:	79 f0       	breq	.+30     	; 0x816 <vfprintf+0x27c>
 7f8:	ae c0       	rjmp	.+348    	; 0x956 <vfprintf+0x3bc>
 7fa:	80 37       	cpi	r24, 0x70	; 112
 7fc:	19 f0       	breq	.+6      	; 0x804 <vfprintf+0x26a>
 7fe:	88 37       	cpi	r24, 0x78	; 120
 800:	21 f0       	breq	.+8      	; 0x80a <vfprintf+0x270>
 802:	a9 c0       	rjmp	.+338    	; 0x956 <vfprintf+0x3bc>
 804:	e9 2f       	mov	r30, r25
 806:	e0 61       	ori	r30, 0x10	; 16
 808:	be 2e       	mov	r11, r30
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x28e>
 80e:	fb 2d       	mov	r31, r11
 810:	f4 60       	ori	r31, 0x04	; 4
 812:	bf 2e       	mov	r11, r31
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x28e>
 816:	34 fe       	sbrs	r3, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <vfprintf+0x294>
 81a:	29 2f       	mov	r18, r25
 81c:	26 60       	ori	r18, 0x06	; 6
 81e:	b2 2e       	mov	r11, r18
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x294>
 822:	28 e0       	ldi	r18, 0x08	; 8
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x298>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x298>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	32 e0       	ldi	r19, 0x02	; 2
 832:	f8 01       	movw	r30, r16
 834:	b7 fe       	sbrs	r11, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <vfprintf+0x2ac>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	06 c0       	rjmp	.+12     	; 0x852 <vfprintf+0x2b8>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	a3 01       	movw	r20, r6
 854:	f1 d0       	rcall	.+482    	; 0xa38 <__ultoa_invert>
 856:	88 2e       	mov	r8, r24
 858:	86 18       	sub	r8, r6
 85a:	fb 2d       	mov	r31, r11
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	3f 2e       	mov	r3, r31
 860:	36 fe       	sbrs	r3, 6
 862:	0d c0       	rjmp	.+26     	; 0x87e <vfprintf+0x2e4>
 864:	23 2d       	mov	r18, r3
 866:	2e 7f       	andi	r18, 0xFE	; 254
 868:	a2 2e       	mov	r10, r18
 86a:	89 14       	cp	r8, r9
 86c:	58 f4       	brcc	.+22     	; 0x884 <vfprintf+0x2ea>
 86e:	34 fe       	sbrs	r3, 4
 870:	0b c0       	rjmp	.+22     	; 0x888 <vfprintf+0x2ee>
 872:	32 fc       	sbrc	r3, 2
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x2ee>
 876:	83 2d       	mov	r24, r3
 878:	8e 7e       	andi	r24, 0xEE	; 238
 87a:	a8 2e       	mov	r10, r24
 87c:	05 c0       	rjmp	.+10     	; 0x888 <vfprintf+0x2ee>
 87e:	b8 2c       	mov	r11, r8
 880:	a3 2c       	mov	r10, r3
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x2f0>
 884:	b8 2c       	mov	r11, r8
 886:	01 c0       	rjmp	.+2      	; 0x88a <vfprintf+0x2f0>
 888:	b9 2c       	mov	r11, r9
 88a:	a4 fe       	sbrs	r10, 4
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <vfprintf+0x312>
 88e:	fe 01       	movw	r30, r28
 890:	e8 0d       	add	r30, r8
 892:	f1 1d       	adc	r31, r1
 894:	80 81       	ld	r24, Z
 896:	80 33       	cpi	r24, 0x30	; 48
 898:	21 f4       	brne	.+8      	; 0x8a2 <vfprintf+0x308>
 89a:	9a 2d       	mov	r25, r10
 89c:	99 7e       	andi	r25, 0xE9	; 233
 89e:	a9 2e       	mov	r10, r25
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x31a>
 8a2:	a2 fe       	sbrs	r10, 2
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x318>
 8a6:	b3 94       	inc	r11
 8a8:	b3 94       	inc	r11
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <vfprintf+0x31a>
 8ac:	8a 2d       	mov	r24, r10
 8ae:	86 78       	andi	r24, 0x86	; 134
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <vfprintf+0x31a>
 8b2:	b3 94       	inc	r11
 8b4:	a3 fc       	sbrc	r10, 3
 8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <vfprintf+0x33e>
 8b8:	a0 fe       	sbrs	r10, 0
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x32e>
 8bc:	b2 14       	cp	r11, r2
 8be:	80 f4       	brcc	.+32     	; 0x8e0 <vfprintf+0x346>
 8c0:	28 0c       	add	r2, r8
 8c2:	92 2c       	mov	r9, r2
 8c4:	9b 18       	sub	r9, r11
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x348>
 8c8:	b2 14       	cp	r11, r2
 8ca:	58 f4       	brcc	.+22     	; 0x8e2 <vfprintf+0x348>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	76 d0       	rcall	.+236    	; 0x9c0 <fputc>
 8d4:	b3 94       	inc	r11
 8d6:	f8 cf       	rjmp	.-16     	; 0x8c8 <vfprintf+0x32e>
 8d8:	b2 14       	cp	r11, r2
 8da:	18 f4       	brcc	.+6      	; 0x8e2 <vfprintf+0x348>
 8dc:	2b 18       	sub	r2, r11
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <vfprintf+0x34a>
 8e0:	98 2c       	mov	r9, r8
 8e2:	21 2c       	mov	r2, r1
 8e4:	a4 fe       	sbrs	r10, 4
 8e6:	0f c0       	rjmp	.+30     	; 0x906 <vfprintf+0x36c>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	68 d0       	rcall	.+208    	; 0x9c0 <fputc>
 8f0:	a2 fe       	sbrs	r10, 2
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <vfprintf+0x386>
 8f4:	a1 fc       	sbrc	r10, 1
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x364>
 8f8:	88 e7       	ldi	r24, 0x78	; 120
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x368>
 8fe:	88 e5       	ldi	r24, 0x58	; 88
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	b6 01       	movw	r22, r12
 904:	0c c0       	rjmp	.+24     	; 0x91e <vfprintf+0x384>
 906:	8a 2d       	mov	r24, r10
 908:	86 78       	andi	r24, 0x86	; 134
 90a:	51 f0       	breq	.+20     	; 0x920 <vfprintf+0x386>
 90c:	a1 fe       	sbrs	r10, 1
 90e:	02 c0       	rjmp	.+4      	; 0x914 <vfprintf+0x37a>
 910:	8b e2       	ldi	r24, 0x2B	; 43
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x37c>
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	a7 fc       	sbrc	r10, 7
 918:	8d e2       	ldi	r24, 0x2D	; 45
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	50 d0       	rcall	.+160    	; 0x9c0 <fputc>
 920:	89 14       	cp	r8, r9
 922:	30 f4       	brcc	.+12     	; 0x930 <vfprintf+0x396>
 924:	b6 01       	movw	r22, r12
 926:	80 e3       	ldi	r24, 0x30	; 48
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	4a d0       	rcall	.+148    	; 0x9c0 <fputc>
 92c:	9a 94       	dec	r9
 92e:	f8 cf       	rjmp	.-16     	; 0x920 <vfprintf+0x386>
 930:	8a 94       	dec	r8
 932:	f3 01       	movw	r30, r6
 934:	e8 0d       	add	r30, r8
 936:	f1 1d       	adc	r31, r1
 938:	80 81       	ld	r24, Z
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	40 d0       	rcall	.+128    	; 0x9c0 <fputc>
 940:	81 10       	cpse	r8, r1
 942:	f6 cf       	rjmp	.-20     	; 0x930 <vfprintf+0x396>
 944:	22 20       	and	r2, r2
 946:	09 f4       	brne	.+2      	; 0x94a <vfprintf+0x3b0>
 948:	4e ce       	rjmp	.-868    	; 0x5e6 <vfprintf+0x4c>
 94a:	b6 01       	movw	r22, r12
 94c:	80 e2       	ldi	r24, 0x20	; 32
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	37 d0       	rcall	.+110    	; 0x9c0 <fputc>
 952:	2a 94       	dec	r2
 954:	f7 cf       	rjmp	.-18     	; 0x944 <vfprintf+0x3aa>
 956:	f6 01       	movw	r30, r12
 958:	86 81       	ldd	r24, Z+6	; 0x06
 95a:	97 81       	ldd	r25, Z+7	; 0x07
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x3c8>
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	9f ef       	ldi	r25, 0xFF	; 255
 962:	2b 96       	adiw	r28, 0x0b	; 11
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	de bf       	out	0x3e, r29	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	cd bf       	out	0x3d, r28	; 61
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	ff 90       	pop	r15
 978:	ef 90       	pop	r14
 97a:	df 90       	pop	r13
 97c:	cf 90       	pop	r12
 97e:	bf 90       	pop	r11
 980:	af 90       	pop	r10
 982:	9f 90       	pop	r9
 984:	8f 90       	pop	r8
 986:	7f 90       	pop	r7
 988:	6f 90       	pop	r6
 98a:	5f 90       	pop	r5
 98c:	4f 90       	pop	r4
 98e:	3f 90       	pop	r3
 990:	2f 90       	pop	r2
 992:	08 95       	ret

00000994 <strnlen_P>:
 994:	fc 01       	movw	r30, r24
 996:	05 90       	lpm	r0, Z+
 998:	61 50       	subi	r22, 0x01	; 1
 99a:	70 40       	sbci	r23, 0x00	; 0
 99c:	01 10       	cpse	r0, r1
 99e:	d8 f7       	brcc	.-10     	; 0x996 <strnlen_P+0x2>
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	8e 0f       	add	r24, r30
 9a6:	9f 1f       	adc	r25, r31
 9a8:	08 95       	ret

000009aa <strnlen>:
 9aa:	fc 01       	movw	r30, r24
 9ac:	61 50       	subi	r22, 0x01	; 1
 9ae:	70 40       	sbci	r23, 0x00	; 0
 9b0:	01 90       	ld	r0, Z+
 9b2:	01 10       	cpse	r0, r1
 9b4:	d8 f7       	brcc	.-10     	; 0x9ac <strnlen+0x2>
 9b6:	80 95       	com	r24
 9b8:	90 95       	com	r25
 9ba:	8e 0f       	add	r24, r30
 9bc:	9f 1f       	adc	r25, r31
 9be:	08 95       	ret

000009c0 <fputc>:
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	fb 01       	movw	r30, r22
 9ca:	23 81       	ldd	r18, Z+3	; 0x03
 9cc:	21 fd       	sbrc	r18, 1
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <fputc+0x16>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	2c c0       	rjmp	.+88     	; 0xa2e <fputc+0x6e>
 9d6:	22 ff       	sbrs	r18, 2
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <fputc+0x46>
 9da:	46 81       	ldd	r20, Z+6	; 0x06
 9dc:	57 81       	ldd	r21, Z+7	; 0x07
 9de:	24 81       	ldd	r18, Z+4	; 0x04
 9e0:	35 81       	ldd	r19, Z+5	; 0x05
 9e2:	42 17       	cp	r20, r18
 9e4:	53 07       	cpc	r21, r19
 9e6:	44 f4       	brge	.+16     	; 0x9f8 <fputc+0x38>
 9e8:	a0 81       	ld	r26, Z
 9ea:	b1 81       	ldd	r27, Z+1	; 0x01
 9ec:	9d 01       	movw	r18, r26
 9ee:	2f 5f       	subi	r18, 0xFF	; 255
 9f0:	3f 4f       	sbci	r19, 0xFF	; 255
 9f2:	31 83       	std	Z+1, r19	; 0x01
 9f4:	20 83       	st	Z, r18
 9f6:	8c 93       	st	X, r24
 9f8:	26 81       	ldd	r18, Z+6	; 0x06
 9fa:	37 81       	ldd	r19, Z+7	; 0x07
 9fc:	2f 5f       	subi	r18, 0xFF	; 255
 9fe:	3f 4f       	sbci	r19, 0xFF	; 255
 a00:	37 83       	std	Z+7, r19	; 0x07
 a02:	26 83       	std	Z+6, r18	; 0x06
 a04:	14 c0       	rjmp	.+40     	; 0xa2e <fputc+0x6e>
 a06:	8b 01       	movw	r16, r22
 a08:	ec 01       	movw	r28, r24
 a0a:	fb 01       	movw	r30, r22
 a0c:	00 84       	ldd	r0, Z+8	; 0x08
 a0e:	f1 85       	ldd	r31, Z+9	; 0x09
 a10:	e0 2d       	mov	r30, r0
 a12:	09 95       	icall
 a14:	89 2b       	or	r24, r25
 a16:	e1 f6       	brne	.-72     	; 0x9d0 <fputc+0x10>
 a18:	d8 01       	movw	r26, r16
 a1a:	16 96       	adiw	r26, 0x06	; 6
 a1c:	8d 91       	ld	r24, X+
 a1e:	9c 91       	ld	r25, X
 a20:	17 97       	sbiw	r26, 0x07	; 7
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	17 96       	adiw	r26, 0x07	; 7
 a26:	9c 93       	st	X, r25
 a28:	8e 93       	st	-X, r24
 a2a:	16 97       	sbiw	r26, 0x06	; 6
 a2c:	ce 01       	movw	r24, r28
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	08 95       	ret

00000a38 <__ultoa_invert>:
 a38:	fa 01       	movw	r30, r20
 a3a:	aa 27       	eor	r26, r26
 a3c:	28 30       	cpi	r18, 0x08	; 8
 a3e:	51 f1       	breq	.+84     	; 0xa94 <__ultoa_invert+0x5c>
 a40:	20 31       	cpi	r18, 0x10	; 16
 a42:	81 f1       	breq	.+96     	; 0xaa4 <__ultoa_invert+0x6c>
 a44:	e8 94       	clt
 a46:	6f 93       	push	r22
 a48:	6e 7f       	andi	r22, 0xFE	; 254
 a4a:	6e 5f       	subi	r22, 0xFE	; 254
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	af 4f       	sbci	r26, 0xFF	; 255
 a54:	b1 e0       	ldi	r27, 0x01	; 1
 a56:	3e d0       	rcall	.+124    	; 0xad4 <__ultoa_invert+0x9c>
 a58:	b4 e0       	ldi	r27, 0x04	; 4
 a5a:	3c d0       	rcall	.+120    	; 0xad4 <__ultoa_invert+0x9c>
 a5c:	67 0f       	add	r22, r23
 a5e:	78 1f       	adc	r23, r24
 a60:	89 1f       	adc	r24, r25
 a62:	9a 1f       	adc	r25, r26
 a64:	a1 1d       	adc	r26, r1
 a66:	68 0f       	add	r22, r24
 a68:	79 1f       	adc	r23, r25
 a6a:	8a 1f       	adc	r24, r26
 a6c:	91 1d       	adc	r25, r1
 a6e:	a1 1d       	adc	r26, r1
 a70:	6a 0f       	add	r22, r26
 a72:	71 1d       	adc	r23, r1
 a74:	81 1d       	adc	r24, r1
 a76:	91 1d       	adc	r25, r1
 a78:	a1 1d       	adc	r26, r1
 a7a:	20 d0       	rcall	.+64     	; 0xabc <__ultoa_invert+0x84>
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__ultoa_invert+0x48>
 a7e:	68 94       	set
 a80:	3f 91       	pop	r19
 a82:	2a e0       	ldi	r18, 0x0A	; 10
 a84:	26 9f       	mul	r18, r22
 a86:	11 24       	eor	r1, r1
 a88:	30 19       	sub	r19, r0
 a8a:	30 5d       	subi	r19, 0xD0	; 208
 a8c:	31 93       	st	Z+, r19
 a8e:	de f6       	brtc	.-74     	; 0xa46 <__ultoa_invert+0xe>
 a90:	cf 01       	movw	r24, r30
 a92:	08 95       	ret
 a94:	46 2f       	mov	r20, r22
 a96:	47 70       	andi	r20, 0x07	; 7
 a98:	40 5d       	subi	r20, 0xD0	; 208
 a9a:	41 93       	st	Z+, r20
 a9c:	b3 e0       	ldi	r27, 0x03	; 3
 a9e:	0f d0       	rcall	.+30     	; 0xabe <__ultoa_invert+0x86>
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__ultoa_invert+0x5c>
 aa2:	f6 cf       	rjmp	.-20     	; 0xa90 <__ultoa_invert+0x58>
 aa4:	46 2f       	mov	r20, r22
 aa6:	4f 70       	andi	r20, 0x0F	; 15
 aa8:	40 5d       	subi	r20, 0xD0	; 208
 aaa:	4a 33       	cpi	r20, 0x3A	; 58
 aac:	18 f0       	brcs	.+6      	; 0xab4 <__ultoa_invert+0x7c>
 aae:	49 5d       	subi	r20, 0xD9	; 217
 ab0:	31 fd       	sbrc	r19, 1
 ab2:	40 52       	subi	r20, 0x20	; 32
 ab4:	41 93       	st	Z+, r20
 ab6:	02 d0       	rcall	.+4      	; 0xabc <__ultoa_invert+0x84>
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__ultoa_invert+0x6c>
 aba:	ea cf       	rjmp	.-44     	; 0xa90 <__ultoa_invert+0x58>
 abc:	b4 e0       	ldi	r27, 0x04	; 4
 abe:	a6 95       	lsr	r26
 ac0:	97 95       	ror	r25
 ac2:	87 95       	ror	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0x86>
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	61 05       	cpc	r22, r1
 ad0:	71 05       	cpc	r23, r1
 ad2:	08 95       	ret
 ad4:	9b 01       	movw	r18, r22
 ad6:	ac 01       	movw	r20, r24
 ad8:	0a 2e       	mov	r0, r26
 ada:	06 94       	lsr	r0
 adc:	57 95       	ror	r21
 ade:	47 95       	ror	r20
 ae0:	37 95       	ror	r19
 ae2:	27 95       	ror	r18
 ae4:	ba 95       	dec	r27
 ae6:	c9 f7       	brne	.-14     	; 0xada <__ultoa_invert+0xa2>
 ae8:	62 0f       	add	r22, r18
 aea:	73 1f       	adc	r23, r19
 aec:	84 1f       	adc	r24, r20
 aee:	95 1f       	adc	r25, r21
 af0:	a0 1d       	adc	r26, r0
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
