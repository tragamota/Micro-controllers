
Micro controllers eindopdracht Wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a09  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ee  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b7  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048f  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  00001d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	42 c0       	rjmp	.+132    	; 0x13a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

#include "Wifi.h"

int main(void)
{
	WifiInit();
  b8:	01 d0       	rcall	.+2      	; 0xbc <WifiInit>
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x2>

000000bc <WifiInit>:

static void WifiTest(void);
static void WifiWriteChar(unsigned char);
static unsigned char WifiReadChar(void);

void WifiInit(void) {
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <WifiInit+0xa>
  c6:	00 d0       	rcall	.+0      	; 0xc8 <WifiInit+0xc>
  c8:	1f 92       	push	r1
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	int baud = REGBAUD;
	UBRR0H = (baud>>8);		//highest 4 bits of the baudrate
  ce:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = baud;			//lowest byte of the baudrate
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	89 b9       	out	0x09, r24	; 9
		
	UCSR0B = 0x0C;			//enable TX en RX
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;			//asychroon 8bits en no parity ingesteld.
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e0:	e1 e0       	ldi	r30, 0x01	; 1
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	81 e4       	ldi	r24, 0x41	; 65
void WifiRequestAP(char **AP) {
	
}

static void WifiWriteChar(unsigned char commandByte) {
	while(!(UCSR0A & (1<<UDRE0)));
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <WifiInit+0x2a>
	UDR0 = commandByte;
  ea:	8c b9       	out	0x0c, r24	; 12
}

static void WifiTest(void) {
	char *ATCommand = "AT";
		
	for(;*ATCommand; ATCommand++) {
  ec:	81 91       	ld	r24, Z+
  ee:	81 11       	cpse	r24, r1
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <WifiInit+0x2a>
  f2:	03 e0       	ldi	r16, 0x03	; 3
  f4:	10 e0       	ldi	r17, 0x00	; 0
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = commandByte;
}

static unsigned char WifiReadChar(void) {
	while(!(UCSR0A & (1<<RXC)));
  f6:	5f 9b       	sbis	0x0b, 7	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <WifiInit+0x3a>
	return UDR0;
  fa:	8c b1       	in	r24, 0x0c	; 12
	}
	
	char receiveBuffer[4]; 
	
	for(int i = 0; i < (sizeof(receiveBuffer) / sizeof(char)) - 1; i++) {
		char receivedByte = WifiReadChar();
  fc:	8d 83       	std	Y+5, r24	; 0x05
		strcat(receiveBuffer, &receivedByte);
  fe:	be 01       	movw	r22, r28
 100:	6b 5f       	subi	r22, 0xFB	; 251
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	0d d0       	rcall	.+26     	; 0x124 <strcat>
 10a:	01 50       	subi	r16, 0x01	; 1
 10c:	11 09       	sbc	r17, r1
		WifiWriteChar(*ATCommand);
	}
	
	char receiveBuffer[4]; 
	
	for(int i = 0; i < (sizeof(receiveBuffer) / sizeof(char)) - 1; i++) {
 10e:	99 f7       	brne	.-26     	; 0xf6 <WifiInit+0x3a>
		
	UCSR0B = 0x0C;			//enable TX en RX
	UCSR0C = 0x06;			//asychroon 8bits en no parity ingesteld.
	
	WifiTest();
}
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <strcat>:
 124:	fb 01       	movw	r30, r22
 126:	dc 01       	movw	r26, r24
 128:	0d 90       	ld	r0, X+
 12a:	00 20       	and	r0, r0
 12c:	e9 f7       	brne	.-6      	; 0x128 <strcat+0x4>
 12e:	11 97       	sbiw	r26, 0x01	; 1
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	00 20       	and	r0, r0
 136:	e1 f7       	brne	.-8      	; 0x130 <strcat+0xc>
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
