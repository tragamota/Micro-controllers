
Micro controllers eindopdracht Wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800100  00000b2e  00000ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000143c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf1  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000848  00000000  00000000  00002edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  00003728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069c  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1b  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004a87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	a7 c0       	rjmp	.+334    	; 0x154 <__vector_1>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 38       	cpi	r26, 0x84	; 132
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	d2 d0       	rcall	.+420    	; 0x258 <main>
  b4:	3a c5       	rjmp	.+2676   	; 0xb2a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_togglePinE>:
	 LCD_writeByte(WRITE_COMMAND, 0x01);
	 LCD_writeByte(WRITE_COMMAND, 0x02);
}

static void LCD_togglePinE(void) {
	 PORTC |= EPIN;
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_togglePinE+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_togglePinE+0xc>
  c4:	00 00       	nop
	 _delay_ms(1);
	 PORTC &= (~(EPIN));
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_togglePinE+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_togglePinE+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <LCD_Command>:
	 _delay_ms(1);
}

static void LCD_Command(uint8_t data) {
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	 PORTC = ((data & 0xF0));
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	85 bb       	out	0x15, r24	; 21
	 LCD_togglePinE();
  de:	ec df       	rcall	.-40     	; 0xb8 <LCD_togglePinE>
	 
	 PORTC = ((data & 0x0F) << 4);
  e0:	20 e1       	ldi	r18, 0x10	; 16
  e2:	c2 9f       	mul	r28, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
	 LCD_togglePinE();
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	e6 df       	rcall	.-52     	; 0xb8 <LCD_togglePinE>
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <init>:
static void LCD_writeByte(uint8_t operation, uint8_t data);
static void LCD_4bit_mode();

void init(void) {
	 //opening for output
	 DDRC = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 bb       	out	0x14, r24	; 20
	 PORTC = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21
		 LCD_Data(data);
	 }
}

static void LCD_4bit_mode() {
	 PORTC = (0x02 << 4);
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	85 bb       	out	0x15, r24	; 21
	 PORTD = PORTC;
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	82 bb       	out	0x12, r24	; 18
	 LCD_togglePinE();
  fe:	dc df       	rcall	.-72     	; 0xb8 <LCD_togglePinE>
	 LCD_togglePinE();
}

static void LCD_writeByte(uint8_t operation, uint8_t data) {
	 if(operation == WRITE_COMMAND) {
		 LCD_Command(data);
 100:	88 e2       	ldi	r24, 0x28	; 40
 102:	e9 df       	rcall	.-46     	; 0xd6 <LCD_Command>
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	e7 df       	rcall	.-50     	; 0xd6 <LCD_Command>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	e5 df       	rcall	.-54     	; 0xd6 <LCD_Command>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	e3 df       	rcall	.-58     	; 0xd6 <LCD_Command>
	 
	 //go home
	 LCD_writeByte(WRITE_COMMAND, 0x02);
	 
	 //reset output
	 PORTC = 0x00;
 110:	15 ba       	out	0x15, r1	; 21
 112:	08 95       	ret

00000114 <display_text>:
}

void display_text(char str[]) {
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
	int i = 0;
	while(str[i] != '\0') {
 11a:	fc 01       	movw	r30, r24
 11c:	c0 81       	ld	r28, Z
 11e:	cc 23       	and	r28, r28
 120:	a1 f0       	breq	.+40     	; 0x14a <display_text+0x36>
 122:	8c 01       	movw	r16, r24
 124:	0f 5f       	subi	r16, 0xFF	; 255
 126:	1f 4f       	sbci	r17, 0xFF	; 255
	 PORTC = ((data & 0x0F) << 4);
	 LCD_togglePinE();
}

static void LCD_Data(uint8_t data) {
	 PORTC = ((data & 0xF0));
 128:	8c 2f       	mov	r24, r28
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	85 bb       	out	0x15, r24	; 21
	 PORTC |= RSPIN;
 12e:	aa 9a       	sbi	0x15, 2	; 21
	 LCD_togglePinE();
 130:	c3 df       	rcall	.-122    	; 0xb8 <LCD_togglePinE>
	 
	 PORTC = ((data & 0x0F) << 4);
 132:	f0 e1       	ldi	r31, 0x10	; 16
 134:	cf 9f       	mul	r28, r31
 136:	90 01       	movw	r18, r0
 138:	11 24       	eor	r1, r1
 13a:	25 bb       	out	0x15, r18	; 21
	 PORTC |= RSPIN;
	 LCD_togglePinE();
 13c:	aa 9a       	sbi	0x15, 2	; 21
 13e:	bc df       	rcall	.-136    	; 0xb8 <LCD_togglePinE>
	 PORTC = 0x00;
}

void display_text(char str[]) {
	int i = 0;
	while(str[i] != '\0') {
 140:	f8 01       	movw	r30, r16
 142:	c1 91       	ld	r28, Z+
 144:	8f 01       	movw	r16, r30
 146:	c1 11       	cpse	r28, r1
 148:	ef cf       	rjmp	.-34     	; 0x128 <display_text+0x14>
		char charToSend = str[i];
		LCD_writeByte(WRITE_DATA, charToSend);
		i++;
	}
	PORTC = 0x00;
 14a:	15 ba       	out	0x15, r1	; 21
 }
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <__vector_1>:

char userLightAction = LIGHT_NO_ACTION;
static char HUE_GROUP_ON_JSON[]		= "{ \"on\": true }";
static char HUE_GROUP_OFF_JSON[]	= "{ \"on\": false }";
	
ISR(INT0_vect) {
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	userLightAction = LIGHT_ON;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <userLightAction>
}
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_2>:

ISR(INT1_vect) {
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
	userLightAction = LIGHT_OFF;
 17c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <userLightAction>
}
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <enableInterrupt>:

void enableInterrupt() {
	//setting external interrupt pins as input with pull up.
	DDRD	= 0x00;
 18a:	11 ba       	out	0x11, r1	; 17
	PORTD	= 0x03;
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	82 bb       	out	0x12, r24	; 18
	
	//interrupts are rising edge and activated
	EICRA = 0xFF;
 190:	9f ef       	ldi	r25, 0xFF	; 255
 192:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x03;
 196:	89 bf       	out	0x39, r24	; 57
	sei();
 198:	78 94       	sei
 19a:	08 95       	ret

0000019c <combineHeaderWithData>:
}

void combineHeaderWithData(char *data, char *des, int size) {
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	da 95       	dec	r29
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	7b 01       	movw	r14, r22
	char headerWithData[256];
	sprintf(headerWithData, "%s%s%s%s%s%s%s%s%s%s%d%s%s", 
 1ba:	9f 93       	push	r25
 1bc:	8f 93       	push	r24
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	9f 93       	push	r25
 1c4:	8f 93       	push	r24
 1c6:	5f 93       	push	r21
 1c8:	4f 93       	push	r20
 1ca:	85 e2       	ldi	r24, 0x25	; 37
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	9f 93       	push	r25
 1d0:	8f 93       	push	r24
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	9f 93       	push	r25
 1d8:	8f 93       	push	r24
 1da:	8e e4       	ldi	r24, 0x4E	; 78
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	9f 93       	push	r25
 1e0:	8f 93       	push	r24
 1e2:	89 e6       	ldi	r24, 0x69	; 105
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	9f 93       	push	r25
 1e8:	8f 93       	push	r24
 1ea:	86 e7       	ldi	r24, 0x76	; 118
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	9f 93       	push	r25
 1f0:	8f 93       	push	r24
 1f2:	8d e7       	ldi	r24, 0x7D	; 125
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	9f 93       	push	r25
 1f8:	8f 93       	push	r24
 1fa:	8e e9       	ldi	r24, 0x9E	; 158
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	9f 93       	push	r25
 200:	8f 93       	push	r24
 202:	87 eb       	ldi	r24, 0xB7	; 183
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	9f 93       	push	r25
 208:	8f 93       	push	r24
 20a:	83 ec       	ldi	r24, 0xC3	; 195
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	9f 93       	push	r25
 210:	8f 93       	push	r24
 212:	85 ee       	ldi	r24, 0xE5	; 229
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	9f 93       	push	r25
 218:	8f 93       	push	r24
 21a:	8a ee       	ldi	r24, 0xEA	; 234
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	8e 01       	movw	r16, r28
 224:	0f 5f       	subi	r16, 0xFF	; 255
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	1f 93       	push	r17
 22a:	0f 93       	push	r16
 22c:	a3 d1       	rcall	.+838    	; 0x574 <sprintf>
	"Content-Type: application/json\r\n",
	"Host: ", HUE_IP, 
	"\r\nConnection: Keep-Alive\r\n",
	"Accept-Encoding: gzip\r\n",
	"Content-Length: ", size, "\r\n\r\n", data);
	des = strcpy(des, headerWithData);
 22e:	b8 01       	movw	r22, r16
 230:	c7 01       	movw	r24, r14
 232:	99 d1       	rcall	.+818    	; 0x566 <strcpy>
}
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	d3 95       	inc	r29
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <main>:


int main(void) {
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	d2 50       	subi	r29, 0x02	; 2
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
	DDRA	= 0xFF;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8a bb       	out	0x1a, r24	; 26
	PORTA	= 0x00;
 270:	1b ba       	out	0x1b, r1	; 27
	
	init();
 272:	3e df       	rcall	.-388    	; 0xf0 <init>
	WifiInit();
 274:	92 d0       	rcall	.+292    	; 0x39a <WifiInit>
 276:	65 e0       	ldi	r22, 0x05	; 5
	WifiConnectToAP(AP_SSID, AP_PASSWORD);
 278:	72 e0       	ldi	r23, 0x02	; 2
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	99 d0       	rcall	.+306    	; 0x3b2 <WifiConnectToAP>
 280:	89 e1       	ldi	r24, 0x19	; 25
	display_text("Ready for use");
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	47 df       	rcall	.-370    	; 0x114 <display_text>
 286:	81 df       	rcall	.-254    	; 0x18a <enableInterrupt>
	enableInterrupt();
 288:	68 94       	set
 28a:	bb 24       	eor	r11, r11
 	char userLightAction_shadowCopy;
	
    while (1) 
    {
 		userLightAction_shadowCopy = userLightAction;
 		userLightAction = LIGHT_NO_ACTION;
 28c:	b1 f8       	bld	r11, 1
 28e:	8e 01       	movw	r16, r28
 290:	0f 5f       	subi	r16, 0xFF	; 255
 			}
 			else {
 				combineHeaderWithData(HUE_GROUP_OFF_JSON, headerWithData, strlen(HUE_GROUP_OFF_JSON));
 			}
			WifiTcpConnect(HUE_IP, HUE_PORT);
			WifiTcpSendData(headerWithData, strlen(headerWithData));
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	0f 2e       	mov	r0, r31
 296:	f0 e0       	ldi	r31, 0x00	; 0
 		if(userLightAction_shadowCopy != LIGHT_NO_ACTION) {
 			if(userLightAction_shadowCopy == LIGHT_ON) {
 				combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 			}
 			else {
 				combineHeaderWithData(HUE_GROUP_OFF_JSON, headerWithData, strlen(HUE_GROUP_OFF_JSON));
 298:	ef 2e       	mov	r14, r31
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	ff 2e       	mov	r15, r31
 29e:	f0 2d       	mov	r31, r0
 2a0:	0f 2e       	mov	r0, r31
 2a2:	f0 e1       	ldi	r31, 0x10	; 16
 		userLightAction_shadowCopy = userLightAction;
 		userLightAction = LIGHT_NO_ACTION;
 		
 		if(userLightAction_shadowCopy != LIGHT_NO_ACTION) {
 			if(userLightAction_shadowCopy == LIGHT_ON) {
 				combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 2a4:	cf 2e       	mov	r12, r31
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	df 2e       	mov	r13, r31
 2aa:	f0 2d       	mov	r31, r0
 2ac:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <userLightAction>
 	char headerWithData[512];
 	char userLightAction_shadowCopy;
	
    while (1) 
    {
 		userLightAction_shadowCopy = userLightAction;
 2b0:	b0 92 1f 01 	sts	0x011F, r11	; 0x80011f <userLightAction>
 		userLightAction = LIGHT_NO_ACTION;
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	49 f1       	breq	.+82     	; 0x30a <main+0xb2>
 		
 		if(userLightAction_shadowCopy != LIGHT_NO_ACTION) {
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	61 f4       	brne	.+24     	; 0x2d4 <main+0x7c>
 			if(userLightAction_shadowCopy == LIGHT_ON) {
 2bc:	f6 01       	movw	r30, r12
 2be:	01 90       	ld	r0, Z+
 				combineHeaderWithData(HUE_GROUP_ON_JSON, headerWithData, strlen(HUE_GROUP_ON_JSON));
 2c0:	00 20       	and	r0, r0
 2c2:	e9 f7       	brne	.-6      	; 0x2be <main+0x66>
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	af 01       	movw	r20, r30
 2c8:	40 51       	subi	r20, 0x10	; 16
 2ca:	51 40       	sbci	r21, 0x01	; 1
 2cc:	b8 01       	movw	r22, r16
 2ce:	c6 01       	movw	r24, r12
 2d0:	65 df       	rcall	.-310    	; 0x19c <combineHeaderWithData>
 2d2:	0b c0       	rjmp	.+22     	; 0x2ea <main+0x92>
 2d4:	f7 01       	movw	r30, r14
 2d6:	01 90       	ld	r0, Z+
 			}
 			else {
 				combineHeaderWithData(HUE_GROUP_OFF_JSON, headerWithData, strlen(HUE_GROUP_OFF_JSON));
 2d8:	00 20       	and	r0, r0
 2da:	e9 f7       	brne	.-6      	; 0x2d6 <main+0x7e>
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	af 01       	movw	r20, r30
 2e0:	40 50       	subi	r20, 0x00	; 0
 2e2:	51 40       	sbci	r21, 0x01	; 1
 2e4:	b8 01       	movw	r22, r16
 2e6:	c7 01       	movw	r24, r14
 2e8:	59 df       	rcall	.-334    	; 0x19c <combineHeaderWithData>
 2ea:	60 e4       	ldi	r22, 0x40	; 64
 			}
			WifiTcpConnect(HUE_IP, HUE_PORT);
 2ec:	7f e1       	ldi	r23, 0x1F	; 31
 2ee:	89 e6       	ldi	r24, 0x69	; 105
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	9d d0       	rcall	.+314    	; 0x42e <WifiTcpConnect>
 2f4:	f8 01       	movw	r30, r16
 2f6:	01 90       	ld	r0, Z+
			WifiTcpSendData(headerWithData, strlen(headerWithData));
 2f8:	00 20       	and	r0, r0
 2fa:	e9 f7       	brne	.-6      	; 0x2f6 <main+0x9e>
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	bf 01       	movw	r22, r30
 300:	60 1b       	sub	r22, r16
 302:	71 0b       	sbc	r23, r17
 304:	c8 01       	movw	r24, r16
 306:	d1 d0       	rcall	.+418    	; 0x4aa <WifiTcpSendData>
 308:	1f d1       	rcall	.+574    	; 0x548 <WifiTcpClose>
 			WifiTcpClose();
 30a:	85 b7       	in	r24, 0x35	; 53
 30c:	80 62       	ori	r24, 0x20	; 32
 		}
 		//go in sleep
 		sleep_mode();
 30e:	85 bf       	out	0x35, r24	; 53
 310:	88 95       	sleep
 312:	85 b7       	in	r24, 0x35	; 53
 314:	8f 7d       	andi	r24, 0xDF	; 223
 316:	85 bf       	out	0x35, r24	; 53
 318:	c9 cf       	rjmp	.-110    	; 0x2ac <main+0x54>

0000031a <wait>:
void WifiTest(void);
void WifiWriteChar(unsigned char);
unsigned char WifiReadChar(void);

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
 31a:	18 16       	cp	r1, r24
 31c:	19 06       	cpc	r1, r25
 31e:	6c f4       	brge	.+26     	; 0x33a <wait+0x20>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	ef ec       	ldi	r30, 0xCF	; 207
 326:	f7 e0       	ldi	r31, 0x07	; 7
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <wait+0xe>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <wait+0x14>
 32e:	00 00       	nop
 330:	2f 5f       	subi	r18, 0xFF	; 255
 332:	3f 4f       	sbci	r19, 0xFF	; 255
 334:	82 17       	cp	r24, r18
 336:	93 07       	cpc	r25, r19
 338:	a9 f7       	brne	.-22     	; 0x324 <wait+0xa>
 33a:	08 95       	ret

0000033c <WifiWriteChar>:
	}
	wait(100);
}

void WifiWriteChar(unsigned char commandByte) {
	while(!(UCSR0A & (1<<UDRE0)));
 33c:	5d 9b       	sbis	0x0b, 5	; 11
 33e:	fe cf       	rjmp	.-4      	; 0x33c <WifiWriteChar>
	UDR0 = commandByte;
 340:	8c b9       	out	0x0c, r24	; 12
 342:	08 95       	ret

00000344 <WifiTest>:
	UCSR0A = 0x00;
	
	WifiTest();
}

void WifiTest(void) {
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <WifiTest+0xa>
 34e:	00 d0       	rcall	.+0      	; 0x350 <WifiTest+0xc>
 350:	1f 92       	push	r1
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	char ATCommand[] = "AT\r\n";
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	e7 e2       	ldi	r30, 0x27	; 39
 35a:	f2 e0       	ldi	r31, 0x02	; 2
 35c:	de 01       	movw	r26, r28
 35e:	11 96       	adiw	r26, 0x01	; 1
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	8a 95       	dec	r24
 366:	e1 f7       	brne	.-8      	; 0x360 <WifiTest+0x1c>
	
	int i = 0;
	while(ATCommand[i] != '\0') {
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	88 23       	and	r24, r24
 36c:	49 f0       	breq	.+18     	; 0x380 <WifiTest+0x3c>
 36e:	8e 01       	movw	r16, r28
 370:	0e 5f       	subi	r16, 0xFE	; 254
 372:	1f 4f       	sbci	r17, 0xFF	; 255
		unsigned char dataToSend = ATCommand[i];
		WifiWriteChar(dataToSend);
 374:	e3 df       	rcall	.-58     	; 0x33c <WifiWriteChar>

void WifiTest(void) {
	char ATCommand[] = "AT\r\n";
	
	int i = 0;
	while(ATCommand[i] != '\0') {
 376:	f8 01       	movw	r30, r16
 378:	81 91       	ld	r24, Z+
 37a:	8f 01       	movw	r16, r30
 37c:	81 11       	cpse	r24, r1
 37e:	fa cf       	rjmp	.-12     	; 0x374 <WifiTest+0x30>
		unsigned char dataToSend = ATCommand[i];
		WifiWriteChar(dataToSend);
		i++;
	}
	wait(1000);
 380:	88 ee       	ldi	r24, 0xE8	; 232
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	ca df       	rcall	.-108    	; 0x31a <wait>
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <WifiInit>:
	}
}

void WifiInit(void) {
	int baud = REGBAUD;
	UBRR0H = (baud>>8);		//highest 4 bits of the baudrate
 39a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = baud;			//lowest byte of the baudrate
 39e:	83 e3       	ldi	r24, 0x33	; 51
 3a0:	89 b9       	out	0x09, r24	; 9

	UCSR0C = 0x06;			//asychroon 8bits en no parity ingesteld.
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UCSR0B = 0x0C;			//enable TX en RX
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0x00;
 3ac:	1b b8       	out	0x0b, r1	; 11
	
	WifiTest();
 3ae:	ca cf       	rjmp	.-108    	; 0x344 <WifiTest>
 3b0:	08 95       	ret

000003b2 <WifiConnectToAP>:
		i++;
	}
	wait(1000);
}

void WifiConnectToAP(char *SSID, char *password) {
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	c0 55       	subi	r28, 0x50	; 80
 3c0:	d1 09       	sbc	r29, r1
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
	char APCommand[80];
	sprintf(APCommand, "%s\"%s\",\"%s\"\r\n", "AT+CWJAP=", SSID, password);
 3cc:	7f 93       	push	r23
 3ce:	6f 93       	push	r22
 3d0:	9f 93       	push	r25
 3d2:	8f 93       	push	r24
 3d4:	8c e2       	ldi	r24, 0x2C	; 44
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	9f 93       	push	r25
 3da:	8f 93       	push	r24
 3dc:	86 e3       	ldi	r24, 0x36	; 54
 3de:	92 e0       	ldi	r25, 0x02	; 2
 3e0:	9f 93       	push	r25
 3e2:	8f 93       	push	r24
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	9f 93       	push	r25
 3ea:	8f 93       	push	r24
 3ec:	c3 d0       	rcall	.+390    	; 0x574 <sprintf>

	int i = 0;
	while(APCommand[i] != '\0') {
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	88 23       	and	r24, r24
 3fc:	49 f0       	breq	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fe:	8e 01       	movw	r16, r28
 400:	0e 5f       	subi	r16, 0xFE	; 254
		unsigned char dataToSend = APCommand[i];
		WifiWriteChar(dataToSend);
 402:	1f 4f       	sbci	r17, 0xFF	; 255
 404:	9b df       	rcall	.-202    	; 0x33c <WifiWriteChar>
void WifiConnectToAP(char *SSID, char *password) {
	char APCommand[80];
	sprintf(APCommand, "%s\"%s\",\"%s\"\r\n", "AT+CWJAP=", SSID, password);

	int i = 0;
	while(APCommand[i] != '\0') {
 406:	f8 01       	movw	r30, r16
 408:	81 91       	ld	r24, Z+
 40a:	8f 01       	movw	r16, r30
 40c:	81 11       	cpse	r24, r1
 40e:	fa cf       	rjmp	.-12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		unsigned char dataToSend = APCommand[i];
		WifiWriteChar(dataToSend);
		i++;
	}
	wait(20000);
 410:	80 e2       	ldi	r24, 0x20	; 32
 412:	9e e4       	ldi	r25, 0x4E	; 78
 414:	82 df       	rcall	.-252    	; 0x31a <wait>
}
 416:	c0 5b       	subi	r28, 0xB0	; 176
 418:	df 4f       	sbci	r29, 0xFF	; 255
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <WifiTcpConnect>:

void WifiTcpConnect(char *IP, int port) {
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	c0 55       	subi	r28, 0x50	; 80
 43c:	d1 09       	sbc	r29, r1
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	char tcpStartCommand[80];
	sprintf(tcpStartCommand, "%s,\"%s\",%d\r\n", "AT+CIPSTART=\"TCP\"", IP, port);
 448:	7f 93       	push	r23
 44a:	6f 93       	push	r22
 44c:	9f 93       	push	r25
 44e:	8f 93       	push	r24
 450:	84 e4       	ldi	r24, 0x44	; 68
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	9f 93       	push	r25
 456:	8f 93       	push	r24
 458:	86 e5       	ldi	r24, 0x56	; 86
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	9f 93       	push	r25
 45e:	8f 93       	push	r24
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	9f 93       	push	r25
 466:	8f 93       	push	r24
 468:	85 d0       	rcall	.+266    	; 0x574 <sprintf>
	
	while(tcpStartCommand[i] != '\0') {
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	88 23       	and	r24, r24
 478:	49 f0       	breq	.+18     	; 0x48c <WifiTcpConnect+0x5e>
 47a:	8e 01       	movw	r16, r28
 47c:	0e 5f       	subi	r16, 0xFE	; 254
		WifiWriteChar(tcpStartCommand[i]);
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
 480:	5d df       	rcall	.-326    	; 0x33c <WifiWriteChar>
void WifiTcpConnect(char *IP, int port) {
	int i = 0;
	char tcpStartCommand[80];
	sprintf(tcpStartCommand, "%s,\"%s\",%d\r\n", "AT+CIPSTART=\"TCP\"", IP, port);
	
	while(tcpStartCommand[i] != '\0') {
 482:	f8 01       	movw	r30, r16
 484:	81 91       	ld	r24, Z+
 486:	8f 01       	movw	r16, r30
 488:	81 11       	cpse	r24, r1
 48a:	fa cf       	rjmp	.-12     	; 0x480 <WifiTcpConnect+0x52>
		WifiWriteChar(tcpStartCommand[i]);
		i++;
	}
	wait(50);
 48c:	82 e3       	ldi	r24, 0x32	; 50
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	44 df       	rcall	.-376    	; 0x31a <wait>
}
 492:	c0 5b       	subi	r28, 0xB0	; 176
 494:	df 4f       	sbci	r29, 0xFF	; 255
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	08 95       	ret

000004aa <WifiTcpSendData>:

void WifiTcpSendData(char data[], int size) {
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	62 97       	sbiw	r28, 0x12	; 18
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	7c 01       	movw	r14, r24
	int i = 0;
	char tcpSendDataCommand[18];
	sprintf(tcpSendDataCommand, "%s%d\r\n", "AT+CIPSEND=", size);
 4c8:	7f 93       	push	r23
 4ca:	6f 93       	push	r22
 4cc:	83 e6       	ldi	r24, 0x63	; 99
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	9f 93       	push	r25
 4d2:	8f 93       	push	r24
 4d4:	8f e6       	ldi	r24, 0x6F	; 111
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	9f 93       	push	r25
 4da:	8f 93       	push	r24
 4dc:	ce 01       	movw	r24, r28
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	9f 93       	push	r25
 4e2:	8f 93       	push	r24
 4e4:	47 d0       	rcall	.+142    	; 0x574 <sprintf>
	
	while(tcpSendDataCommand[i] != '\0') {
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	88 23       	and	r24, r24
 4f4:	49 f0       	breq	.+18     	; 0x508 <WifiTcpSendData+0x5e>
 4f6:	8e 01       	movw	r16, r28
 4f8:	0e 5f       	subi	r16, 0xFE	; 254
		WifiWriteChar(tcpSendDataCommand[i]);
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	1f df       	rcall	.-450    	; 0x33c <WifiWriteChar>
void WifiTcpSendData(char data[], int size) {
	int i = 0;
	char tcpSendDataCommand[18];
	sprintf(tcpSendDataCommand, "%s%d\r\n", "AT+CIPSEND=", size);
	
	while(tcpSendDataCommand[i] != '\0') {
 4fe:	f8 01       	movw	r30, r16
 500:	81 91       	ld	r24, Z+
 502:	8f 01       	movw	r16, r30
 504:	81 11       	cpse	r24, r1
 506:	fa cf       	rjmp	.-12     	; 0x4fc <WifiTcpSendData+0x52>
		WifiWriteChar(tcpSendDataCommand[i]);
		i++;
	}
	wait(25);
 508:	89 e1       	ldi	r24, 0x19	; 25
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	06 df       	rcall	.-500    	; 0x31a <wait>
	
	i = 0;
	while(data[i] != '\0') {
 50e:	f7 01       	movw	r30, r14
 510:	80 81       	ld	r24, Z
 512:	88 23       	and	r24, r24
 514:	49 f0       	breq	.+18     	; 0x528 <WifiTcpSendData+0x7e>
 516:	87 01       	movw	r16, r14
 518:	0f 5f       	subi	r16, 0xFF	; 255
		WifiWriteChar(data[i]);
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	0f df       	rcall	.-482    	; 0x33c <WifiWriteChar>
		i++;
	}
	wait(25);
	
	i = 0;
	while(data[i] != '\0') {
 51e:	f8 01       	movw	r30, r16
 520:	81 91       	ld	r24, Z+
 522:	8f 01       	movw	r16, r30
 524:	81 11       	cpse	r24, r1
		WifiWriteChar(data[i]);
		i++;
	}
	wait(25);
 526:	fa cf       	rjmp	.-12     	; 0x51c <WifiTcpSendData+0x72>
 528:	89 e1       	ldi	r24, 0x19	; 25
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	f6 de       	rcall	.-532    	; 0x31a <wait>
}
 52e:	62 96       	adiw	r28, 0x12	; 18
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <WifiTcpClose>:

void WifiTcpClose() {
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	c7 e7       	ldi	r28, 0x77	; 119
 54e:	d2 e0       	ldi	r29, 0x02	; 2
 550:	81 e4       	ldi	r24, 0x41	; 65
	char *tcpCloseCommand = "AT+CIPCLOSE\r\n";
		
	for(;*tcpCloseCommand; tcpCloseCommand++) {
		WifiWriteChar(*tcpCloseCommand);
 552:	f4 de       	rcall	.-536    	; 0x33c <WifiWriteChar>
}

void WifiTcpClose() {
	char *tcpCloseCommand = "AT+CIPCLOSE\r\n";
		
	for(;*tcpCloseCommand; tcpCloseCommand++) {
 554:	89 91       	ld	r24, Y+
 556:	81 11       	cpse	r24, r1
 558:	fc cf       	rjmp	.-8      	; 0x552 <WifiTcpClose+0xa>
		WifiWriteChar(*tcpCloseCommand);
	}
	wait(100);
 55a:	84 e6       	ldi	r24, 0x64	; 100
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	dd de       	rcall	.-582    	; 0x31a <wait>
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <strcpy>:
 566:	fb 01       	movw	r30, r22
 568:	dc 01       	movw	r26, r24
 56a:	01 90       	ld	r0, Z+
 56c:	0d 92       	st	X+, r0
 56e:	00 20       	and	r0, r0
 570:	e1 f7       	brne	.-8      	; 0x56a <strcpy+0x4>
 572:	08 95       	ret

00000574 <sprintf>:
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	2e 97       	sbiw	r28, 0x0e	; 14
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	0d 89       	ldd	r16, Y+21	; 0x15
 58e:	1e 89       	ldd	r17, Y+22	; 0x16
 590:	86 e0       	ldi	r24, 0x06	; 6
 592:	8c 83       	std	Y+4, r24	; 0x04
 594:	1a 83       	std	Y+2, r17	; 0x02
 596:	09 83       	std	Y+1, r16	; 0x01
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f e7       	ldi	r25, 0x7F	; 127
 59c:	9e 83       	std	Y+6, r25	; 0x06
 59e:	8d 83       	std	Y+5, r24	; 0x05
 5a0:	ae 01       	movw	r20, r28
 5a2:	47 5e       	subi	r20, 0xE7	; 231
 5a4:	5f 4f       	sbci	r21, 0xFF	; 255
 5a6:	6f 89       	ldd	r22, Y+23	; 0x17
 5a8:	78 8d       	ldd	r23, Y+24	; 0x18
 5aa:	ce 01       	movw	r24, r28
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	10 d0       	rcall	.+32     	; 0x5d0 <vfprintf>
 5b0:	ef 81       	ldd	r30, Y+7	; 0x07
 5b2:	f8 85       	ldd	r31, Y+8	; 0x08
 5b4:	e0 0f       	add	r30, r16
 5b6:	f1 1f       	adc	r31, r17
 5b8:	10 82       	st	Z, r1
 5ba:	2e 96       	adiw	r28, 0x0e	; 14
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret

000005d0 <vfprintf>:
 5d0:	2f 92       	push	r2
 5d2:	3f 92       	push	r3
 5d4:	4f 92       	push	r4
 5d6:	5f 92       	push	r5
 5d8:	6f 92       	push	r6
 5da:	7f 92       	push	r7
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	2b 97       	sbiw	r28, 0x0b	; 11
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	6c 01       	movw	r12, r24
 606:	7b 01       	movw	r14, r22
 608:	8a 01       	movw	r16, r20
 60a:	fc 01       	movw	r30, r24
 60c:	17 82       	std	Z+7, r1	; 0x07
 60e:	16 82       	std	Z+6, r1	; 0x06
 610:	83 81       	ldd	r24, Z+3	; 0x03
 612:	81 ff       	sbrs	r24, 1
 614:	bf c1       	rjmp	.+894    	; 0x994 <vfprintf+0x3c4>
 616:	ce 01       	movw	r24, r28
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	3c 01       	movw	r6, r24
 61c:	f6 01       	movw	r30, r12
 61e:	93 81       	ldd	r25, Z+3	; 0x03
 620:	f7 01       	movw	r30, r14
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	88 23       	and	r24, r24
 62e:	09 f4       	brne	.+2      	; 0x632 <vfprintf+0x62>
 630:	ad c1       	rjmp	.+858    	; 0x98c <vfprintf+0x3bc>
 632:	85 32       	cpi	r24, 0x25	; 37
 634:	39 f4       	brne	.+14     	; 0x644 <vfprintf+0x74>
 636:	93 fd       	sbrc	r25, 3
 638:	85 91       	lpm	r24, Z+
 63a:	93 ff       	sbrs	r25, 3
 63c:	81 91       	ld	r24, Z+
 63e:	7f 01       	movw	r14, r30
 640:	85 32       	cpi	r24, 0x25	; 37
 642:	21 f4       	brne	.+8      	; 0x64c <vfprintf+0x7c>
 644:	b6 01       	movw	r22, r12
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	d6 d1       	rcall	.+940    	; 0x9f6 <fputc>
 64a:	e8 cf       	rjmp	.-48     	; 0x61c <vfprintf+0x4c>
 64c:	91 2c       	mov	r9, r1
 64e:	21 2c       	mov	r2, r1
 650:	31 2c       	mov	r3, r1
 652:	ff e1       	ldi	r31, 0x1F	; 31
 654:	f3 15       	cp	r31, r3
 656:	d8 f0       	brcs	.+54     	; 0x68e <vfprintf+0xbe>
 658:	8b 32       	cpi	r24, 0x2B	; 43
 65a:	79 f0       	breq	.+30     	; 0x67a <vfprintf+0xaa>
 65c:	38 f4       	brcc	.+14     	; 0x66c <vfprintf+0x9c>
 65e:	80 32       	cpi	r24, 0x20	; 32
 660:	79 f0       	breq	.+30     	; 0x680 <vfprintf+0xb0>
 662:	83 32       	cpi	r24, 0x23	; 35
 664:	a1 f4       	brne	.+40     	; 0x68e <vfprintf+0xbe>
 666:	23 2d       	mov	r18, r3
 668:	20 61       	ori	r18, 0x10	; 16
 66a:	1d c0       	rjmp	.+58     	; 0x6a6 <vfprintf+0xd6>
 66c:	8d 32       	cpi	r24, 0x2D	; 45
 66e:	61 f0       	breq	.+24     	; 0x688 <vfprintf+0xb8>
 670:	80 33       	cpi	r24, 0x30	; 48
 672:	69 f4       	brne	.+26     	; 0x68e <vfprintf+0xbe>
 674:	23 2d       	mov	r18, r3
 676:	21 60       	ori	r18, 0x01	; 1
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <vfprintf+0xd6>
 67a:	83 2d       	mov	r24, r3
 67c:	82 60       	ori	r24, 0x02	; 2
 67e:	38 2e       	mov	r3, r24
 680:	e3 2d       	mov	r30, r3
 682:	e4 60       	ori	r30, 0x04	; 4
 684:	3e 2e       	mov	r3, r30
 686:	2a c0       	rjmp	.+84     	; 0x6dc <vfprintf+0x10c>
 688:	f3 2d       	mov	r31, r3
 68a:	f8 60       	ori	r31, 0x08	; 8
 68c:	1d c0       	rjmp	.+58     	; 0x6c8 <vfprintf+0xf8>
 68e:	37 fc       	sbrc	r3, 7
 690:	2d c0       	rjmp	.+90     	; 0x6ec <vfprintf+0x11c>
 692:	20 ed       	ldi	r18, 0xD0	; 208
 694:	28 0f       	add	r18, r24
 696:	2a 30       	cpi	r18, 0x0A	; 10
 698:	40 f0       	brcs	.+16     	; 0x6aa <vfprintf+0xda>
 69a:	8e 32       	cpi	r24, 0x2E	; 46
 69c:	b9 f4       	brne	.+46     	; 0x6cc <vfprintf+0xfc>
 69e:	36 fc       	sbrc	r3, 6
 6a0:	75 c1       	rjmp	.+746    	; 0x98c <vfprintf+0x3bc>
 6a2:	23 2d       	mov	r18, r3
 6a4:	20 64       	ori	r18, 0x40	; 64
 6a6:	32 2e       	mov	r3, r18
 6a8:	19 c0       	rjmp	.+50     	; 0x6dc <vfprintf+0x10c>
 6aa:	36 fe       	sbrs	r3, 6
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <vfprintf+0xea>
 6ae:	8a e0       	ldi	r24, 0x0A	; 10
 6b0:	98 9e       	mul	r9, r24
 6b2:	20 0d       	add	r18, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	92 2e       	mov	r9, r18
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <vfprintf+0x10c>
 6ba:	ea e0       	ldi	r30, 0x0A	; 10
 6bc:	2e 9e       	mul	r2, r30
 6be:	20 0d       	add	r18, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	22 2e       	mov	r2, r18
 6c4:	f3 2d       	mov	r31, r3
 6c6:	f0 62       	ori	r31, 0x20	; 32
 6c8:	3f 2e       	mov	r3, r31
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <vfprintf+0x10c>
 6cc:	8c 36       	cpi	r24, 0x6C	; 108
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <vfprintf+0x108>
 6d0:	83 2d       	mov	r24, r3
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	38 2e       	mov	r3, r24
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <vfprintf+0x10c>
 6d8:	88 36       	cpi	r24, 0x68	; 104
 6da:	41 f4       	brne	.+16     	; 0x6ec <vfprintf+0x11c>
 6dc:	f7 01       	movw	r30, r14
 6de:	93 fd       	sbrc	r25, 3
 6e0:	85 91       	lpm	r24, Z+
 6e2:	93 ff       	sbrs	r25, 3
 6e4:	81 91       	ld	r24, Z+
 6e6:	7f 01       	movw	r14, r30
 6e8:	81 11       	cpse	r24, r1
 6ea:	b3 cf       	rjmp	.-154    	; 0x652 <vfprintf+0x82>
 6ec:	98 2f       	mov	r25, r24
 6ee:	9f 7d       	andi	r25, 0xDF	; 223
 6f0:	95 54       	subi	r25, 0x45	; 69
 6f2:	93 30       	cpi	r25, 0x03	; 3
 6f4:	28 f4       	brcc	.+10     	; 0x700 <vfprintf+0x130>
 6f6:	0c 5f       	subi	r16, 0xFC	; 252
 6f8:	1f 4f       	sbci	r17, 0xFF	; 255
 6fa:	9f e3       	ldi	r25, 0x3F	; 63
 6fc:	99 83       	std	Y+1, r25	; 0x01
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <vfprintf+0x14a>
 700:	83 36       	cpi	r24, 0x63	; 99
 702:	31 f0       	breq	.+12     	; 0x710 <vfprintf+0x140>
 704:	83 37       	cpi	r24, 0x73	; 115
 706:	71 f0       	breq	.+28     	; 0x724 <vfprintf+0x154>
 708:	83 35       	cpi	r24, 0x53	; 83
 70a:	09 f0       	breq	.+2      	; 0x70e <vfprintf+0x13e>
 70c:	55 c0       	rjmp	.+170    	; 0x7b8 <vfprintf+0x1e8>
 70e:	20 c0       	rjmp	.+64     	; 0x750 <vfprintf+0x180>
 710:	f8 01       	movw	r30, r16
 712:	80 81       	ld	r24, Z
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	0e 5f       	subi	r16, 0xFE	; 254
 718:	1f 4f       	sbci	r17, 0xFF	; 255
 71a:	88 24       	eor	r8, r8
 71c:	83 94       	inc	r8
 71e:	91 2c       	mov	r9, r1
 720:	53 01       	movw	r10, r6
 722:	12 c0       	rjmp	.+36     	; 0x748 <vfprintf+0x178>
 724:	28 01       	movw	r4, r16
 726:	f2 e0       	ldi	r31, 0x02	; 2
 728:	4f 0e       	add	r4, r31
 72a:	51 1c       	adc	r5, r1
 72c:	f8 01       	movw	r30, r16
 72e:	a0 80       	ld	r10, Z
 730:	b1 80       	ldd	r11, Z+1	; 0x01
 732:	36 fe       	sbrs	r3, 6
 734:	03 c0       	rjmp	.+6      	; 0x73c <vfprintf+0x16c>
 736:	69 2d       	mov	r22, r9
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x170>
 73c:	6f ef       	ldi	r22, 0xFF	; 255
 73e:	7f ef       	ldi	r23, 0xFF	; 255
 740:	c5 01       	movw	r24, r10
 742:	4e d1       	rcall	.+668    	; 0x9e0 <strnlen>
 744:	4c 01       	movw	r8, r24
 746:	82 01       	movw	r16, r4
 748:	f3 2d       	mov	r31, r3
 74a:	ff 77       	andi	r31, 0x7F	; 127
 74c:	3f 2e       	mov	r3, r31
 74e:	15 c0       	rjmp	.+42     	; 0x77a <vfprintf+0x1aa>
 750:	28 01       	movw	r4, r16
 752:	22 e0       	ldi	r18, 0x02	; 2
 754:	42 0e       	add	r4, r18
 756:	51 1c       	adc	r5, r1
 758:	f8 01       	movw	r30, r16
 75a:	a0 80       	ld	r10, Z
 75c:	b1 80       	ldd	r11, Z+1	; 0x01
 75e:	36 fe       	sbrs	r3, 6
 760:	03 c0       	rjmp	.+6      	; 0x768 <vfprintf+0x198>
 762:	69 2d       	mov	r22, r9
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0x19c>
 768:	6f ef       	ldi	r22, 0xFF	; 255
 76a:	7f ef       	ldi	r23, 0xFF	; 255
 76c:	c5 01       	movw	r24, r10
 76e:	2d d1       	rcall	.+602    	; 0x9ca <strnlen_P>
 770:	4c 01       	movw	r8, r24
 772:	f3 2d       	mov	r31, r3
 774:	f0 68       	ori	r31, 0x80	; 128
 776:	3f 2e       	mov	r3, r31
 778:	82 01       	movw	r16, r4
 77a:	33 fc       	sbrc	r3, 3
 77c:	19 c0       	rjmp	.+50     	; 0x7b0 <vfprintf+0x1e0>
 77e:	82 2d       	mov	r24, r2
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	88 16       	cp	r8, r24
 784:	99 06       	cpc	r9, r25
 786:	a0 f4       	brcc	.+40     	; 0x7b0 <vfprintf+0x1e0>
 788:	b6 01       	movw	r22, r12
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	33 d1       	rcall	.+614    	; 0x9f6 <fputc>
 790:	2a 94       	dec	r2
 792:	f5 cf       	rjmp	.-22     	; 0x77e <vfprintf+0x1ae>
 794:	f5 01       	movw	r30, r10
 796:	37 fc       	sbrc	r3, 7
 798:	85 91       	lpm	r24, Z+
 79a:	37 fe       	sbrs	r3, 7
 79c:	81 91       	ld	r24, Z+
 79e:	5f 01       	movw	r10, r30
 7a0:	b6 01       	movw	r22, r12
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	28 d1       	rcall	.+592    	; 0x9f6 <fputc>
 7a6:	21 10       	cpse	r2, r1
 7a8:	2a 94       	dec	r2
 7aa:	21 e0       	ldi	r18, 0x01	; 1
 7ac:	82 1a       	sub	r8, r18
 7ae:	91 08       	sbc	r9, r1
 7b0:	81 14       	cp	r8, r1
 7b2:	91 04       	cpc	r9, r1
 7b4:	79 f7       	brne	.-34     	; 0x794 <vfprintf+0x1c4>
 7b6:	e1 c0       	rjmp	.+450    	; 0x97a <vfprintf+0x3aa>
 7b8:	84 36       	cpi	r24, 0x64	; 100
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <vfprintf+0x1f0>
 7bc:	89 36       	cpi	r24, 0x69	; 105
 7be:	39 f5       	brne	.+78     	; 0x80e <vfprintf+0x23e>
 7c0:	f8 01       	movw	r30, r16
 7c2:	37 fe       	sbrs	r3, 7
 7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <vfprintf+0x204>
 7c6:	60 81       	ld	r22, Z
 7c8:	71 81       	ldd	r23, Z+1	; 0x01
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	0c 5f       	subi	r16, 0xFC	; 252
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <vfprintf+0x214>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	07 2e       	mov	r0, r23
 7da:	00 0c       	add	r0, r0
 7dc:	88 0b       	sbc	r24, r24
 7de:	99 0b       	sbc	r25, r25
 7e0:	0e 5f       	subi	r16, 0xFE	; 254
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	f3 2d       	mov	r31, r3
 7e6:	ff 76       	andi	r31, 0x6F	; 111
 7e8:	3f 2e       	mov	r3, r31
 7ea:	97 ff       	sbrs	r25, 7
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x230>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	f0 68       	ori	r31, 0x80	; 128
 7fe:	3f 2e       	mov	r3, r31
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	a3 01       	movw	r20, r6
 806:	33 d1       	rcall	.+614    	; 0xa6e <__ultoa_invert>
 808:	88 2e       	mov	r8, r24
 80a:	86 18       	sub	r8, r6
 80c:	44 c0       	rjmp	.+136    	; 0x896 <vfprintf+0x2c6>
 80e:	85 37       	cpi	r24, 0x75	; 117
 810:	31 f4       	brne	.+12     	; 0x81e <vfprintf+0x24e>
 812:	23 2d       	mov	r18, r3
 814:	2f 7e       	andi	r18, 0xEF	; 239
 816:	b2 2e       	mov	r11, r18
 818:	2a e0       	ldi	r18, 0x0A	; 10
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	25 c0       	rjmp	.+74     	; 0x868 <vfprintf+0x298>
 81e:	93 2d       	mov	r25, r3
 820:	99 7f       	andi	r25, 0xF9	; 249
 822:	b9 2e       	mov	r11, r25
 824:	8f 36       	cpi	r24, 0x6F	; 111
 826:	c1 f0       	breq	.+48     	; 0x858 <vfprintf+0x288>
 828:	18 f4       	brcc	.+6      	; 0x830 <vfprintf+0x260>
 82a:	88 35       	cpi	r24, 0x58	; 88
 82c:	79 f0       	breq	.+30     	; 0x84c <vfprintf+0x27c>
 82e:	ae c0       	rjmp	.+348    	; 0x98c <vfprintf+0x3bc>
 830:	80 37       	cpi	r24, 0x70	; 112
 832:	19 f0       	breq	.+6      	; 0x83a <vfprintf+0x26a>
 834:	88 37       	cpi	r24, 0x78	; 120
 836:	21 f0       	breq	.+8      	; 0x840 <vfprintf+0x270>
 838:	a9 c0       	rjmp	.+338    	; 0x98c <vfprintf+0x3bc>
 83a:	e9 2f       	mov	r30, r25
 83c:	e0 61       	ori	r30, 0x10	; 16
 83e:	be 2e       	mov	r11, r30
 840:	b4 fe       	sbrs	r11, 4
 842:	0d c0       	rjmp	.+26     	; 0x85e <vfprintf+0x28e>
 844:	fb 2d       	mov	r31, r11
 846:	f4 60       	ori	r31, 0x04	; 4
 848:	bf 2e       	mov	r11, r31
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x28e>
 84c:	34 fe       	sbrs	r3, 4
 84e:	0a c0       	rjmp	.+20     	; 0x864 <vfprintf+0x294>
 850:	29 2f       	mov	r18, r25
 852:	26 60       	ori	r18, 0x06	; 6
 854:	b2 2e       	mov	r11, r18
 856:	06 c0       	rjmp	.+12     	; 0x864 <vfprintf+0x294>
 858:	28 e0       	ldi	r18, 0x08	; 8
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	05 c0       	rjmp	.+10     	; 0x868 <vfprintf+0x298>
 85e:	20 e1       	ldi	r18, 0x10	; 16
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <vfprintf+0x298>
 864:	20 e1       	ldi	r18, 0x10	; 16
 866:	32 e0       	ldi	r19, 0x02	; 2
 868:	f8 01       	movw	r30, r16
 86a:	b7 fe       	sbrs	r11, 7
 86c:	07 c0       	rjmp	.+14     	; 0x87c <vfprintf+0x2ac>
 86e:	60 81       	ld	r22, Z
 870:	71 81       	ldd	r23, Z+1	; 0x01
 872:	82 81       	ldd	r24, Z+2	; 0x02
 874:	93 81       	ldd	r25, Z+3	; 0x03
 876:	0c 5f       	subi	r16, 0xFC	; 252
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x2b8>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 5f       	subi	r16, 0xFE	; 254
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	a3 01       	movw	r20, r6
 88a:	f1 d0       	rcall	.+482    	; 0xa6e <__ultoa_invert>
 88c:	88 2e       	mov	r8, r24
 88e:	86 18       	sub	r8, r6
 890:	fb 2d       	mov	r31, r11
 892:	ff 77       	andi	r31, 0x7F	; 127
 894:	3f 2e       	mov	r3, r31
 896:	36 fe       	sbrs	r3, 6
 898:	0d c0       	rjmp	.+26     	; 0x8b4 <vfprintf+0x2e4>
 89a:	23 2d       	mov	r18, r3
 89c:	2e 7f       	andi	r18, 0xFE	; 254
 89e:	a2 2e       	mov	r10, r18
 8a0:	89 14       	cp	r8, r9
 8a2:	58 f4       	brcc	.+22     	; 0x8ba <vfprintf+0x2ea>
 8a4:	34 fe       	sbrs	r3, 4
 8a6:	0b c0       	rjmp	.+22     	; 0x8be <vfprintf+0x2ee>
 8a8:	32 fc       	sbrc	r3, 2
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <vfprintf+0x2ee>
 8ac:	83 2d       	mov	r24, r3
 8ae:	8e 7e       	andi	r24, 0xEE	; 238
 8b0:	a8 2e       	mov	r10, r24
 8b2:	05 c0       	rjmp	.+10     	; 0x8be <vfprintf+0x2ee>
 8b4:	b8 2c       	mov	r11, r8
 8b6:	a3 2c       	mov	r10, r3
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <vfprintf+0x2f0>
 8ba:	b8 2c       	mov	r11, r8
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x2f0>
 8be:	b9 2c       	mov	r11, r9
 8c0:	a4 fe       	sbrs	r10, 4
 8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <vfprintf+0x312>
 8c4:	fe 01       	movw	r30, r28
 8c6:	e8 0d       	add	r30, r8
 8c8:	f1 1d       	adc	r31, r1
 8ca:	80 81       	ld	r24, Z
 8cc:	80 33       	cpi	r24, 0x30	; 48
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <vfprintf+0x308>
 8d0:	9a 2d       	mov	r25, r10
 8d2:	99 7e       	andi	r25, 0xE9	; 233
 8d4:	a9 2e       	mov	r10, r25
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <vfprintf+0x31a>
 8d8:	a2 fe       	sbrs	r10, 2
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <vfprintf+0x318>
 8dc:	b3 94       	inc	r11
 8de:	b3 94       	inc	r11
 8e0:	04 c0       	rjmp	.+8      	; 0x8ea <vfprintf+0x31a>
 8e2:	8a 2d       	mov	r24, r10
 8e4:	86 78       	andi	r24, 0x86	; 134
 8e6:	09 f0       	breq	.+2      	; 0x8ea <vfprintf+0x31a>
 8e8:	b3 94       	inc	r11
 8ea:	a3 fc       	sbrc	r10, 3
 8ec:	10 c0       	rjmp	.+32     	; 0x90e <vfprintf+0x33e>
 8ee:	a0 fe       	sbrs	r10, 0
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <vfprintf+0x32e>
 8f2:	b2 14       	cp	r11, r2
 8f4:	80 f4       	brcc	.+32     	; 0x916 <vfprintf+0x346>
 8f6:	28 0c       	add	r2, r8
 8f8:	92 2c       	mov	r9, r2
 8fa:	9b 18       	sub	r9, r11
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <vfprintf+0x348>
 8fe:	b2 14       	cp	r11, r2
 900:	58 f4       	brcc	.+22     	; 0x918 <vfprintf+0x348>
 902:	b6 01       	movw	r22, r12
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	76 d0       	rcall	.+236    	; 0x9f6 <fputc>
 90a:	b3 94       	inc	r11
 90c:	f8 cf       	rjmp	.-16     	; 0x8fe <vfprintf+0x32e>
 90e:	b2 14       	cp	r11, r2
 910:	18 f4       	brcc	.+6      	; 0x918 <vfprintf+0x348>
 912:	2b 18       	sub	r2, r11
 914:	02 c0       	rjmp	.+4      	; 0x91a <vfprintf+0x34a>
 916:	98 2c       	mov	r9, r8
 918:	21 2c       	mov	r2, r1
 91a:	a4 fe       	sbrs	r10, 4
 91c:	0f c0       	rjmp	.+30     	; 0x93c <vfprintf+0x36c>
 91e:	b6 01       	movw	r22, r12
 920:	80 e3       	ldi	r24, 0x30	; 48
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	68 d0       	rcall	.+208    	; 0x9f6 <fputc>
 926:	a2 fe       	sbrs	r10, 2
 928:	16 c0       	rjmp	.+44     	; 0x956 <vfprintf+0x386>
 92a:	a1 fc       	sbrc	r10, 1
 92c:	03 c0       	rjmp	.+6      	; 0x934 <vfprintf+0x364>
 92e:	88 e7       	ldi	r24, 0x78	; 120
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x368>
 934:	88 e5       	ldi	r24, 0x58	; 88
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	b6 01       	movw	r22, r12
 93a:	0c c0       	rjmp	.+24     	; 0x954 <vfprintf+0x384>
 93c:	8a 2d       	mov	r24, r10
 93e:	86 78       	andi	r24, 0x86	; 134
 940:	51 f0       	breq	.+20     	; 0x956 <vfprintf+0x386>
 942:	a1 fe       	sbrs	r10, 1
 944:	02 c0       	rjmp	.+4      	; 0x94a <vfprintf+0x37a>
 946:	8b e2       	ldi	r24, 0x2B	; 43
 948:	01 c0       	rjmp	.+2      	; 0x94c <vfprintf+0x37c>
 94a:	80 e2       	ldi	r24, 0x20	; 32
 94c:	a7 fc       	sbrc	r10, 7
 94e:	8d e2       	ldi	r24, 0x2D	; 45
 950:	b6 01       	movw	r22, r12
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	50 d0       	rcall	.+160    	; 0x9f6 <fputc>
 956:	89 14       	cp	r8, r9
 958:	30 f4       	brcc	.+12     	; 0x966 <vfprintf+0x396>
 95a:	b6 01       	movw	r22, r12
 95c:	80 e3       	ldi	r24, 0x30	; 48
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	4a d0       	rcall	.+148    	; 0x9f6 <fputc>
 962:	9a 94       	dec	r9
 964:	f8 cf       	rjmp	.-16     	; 0x956 <vfprintf+0x386>
 966:	8a 94       	dec	r8
 968:	f3 01       	movw	r30, r6
 96a:	e8 0d       	add	r30, r8
 96c:	f1 1d       	adc	r31, r1
 96e:	80 81       	ld	r24, Z
 970:	b6 01       	movw	r22, r12
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	40 d0       	rcall	.+128    	; 0x9f6 <fputc>
 976:	81 10       	cpse	r8, r1
 978:	f6 cf       	rjmp	.-20     	; 0x966 <vfprintf+0x396>
 97a:	22 20       	and	r2, r2
 97c:	09 f4       	brne	.+2      	; 0x980 <vfprintf+0x3b0>
 97e:	4e ce       	rjmp	.-868    	; 0x61c <vfprintf+0x4c>
 980:	b6 01       	movw	r22, r12
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	37 d0       	rcall	.+110    	; 0x9f6 <fputc>
 988:	2a 94       	dec	r2
 98a:	f7 cf       	rjmp	.-18     	; 0x97a <vfprintf+0x3aa>
 98c:	f6 01       	movw	r30, r12
 98e:	86 81       	ldd	r24, Z+6	; 0x06
 990:	97 81       	ldd	r25, Z+7	; 0x07
 992:	02 c0       	rjmp	.+4      	; 0x998 <vfprintf+0x3c8>
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	9f ef       	ldi	r25, 0xFF	; 255
 998:	2b 96       	adiw	r28, 0x0b	; 11
 99a:	0f b6       	in	r0, 0x3f	; 63
 99c:	f8 94       	cli
 99e:	de bf       	out	0x3e, r29	; 62
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	cd bf       	out	0x3d, r28	; 61
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	0f 91       	pop	r16
 9ac:	ff 90       	pop	r15
 9ae:	ef 90       	pop	r14
 9b0:	df 90       	pop	r13
 9b2:	cf 90       	pop	r12
 9b4:	bf 90       	pop	r11
 9b6:	af 90       	pop	r10
 9b8:	9f 90       	pop	r9
 9ba:	8f 90       	pop	r8
 9bc:	7f 90       	pop	r7
 9be:	6f 90       	pop	r6
 9c0:	5f 90       	pop	r5
 9c2:	4f 90       	pop	r4
 9c4:	3f 90       	pop	r3
 9c6:	2f 90       	pop	r2
 9c8:	08 95       	ret

000009ca <strnlen_P>:
 9ca:	fc 01       	movw	r30, r24
 9cc:	05 90       	lpm	r0, Z+
 9ce:	61 50       	subi	r22, 0x01	; 1
 9d0:	70 40       	sbci	r23, 0x00	; 0
 9d2:	01 10       	cpse	r0, r1
 9d4:	d8 f7       	brcc	.-10     	; 0x9cc <strnlen_P+0x2>
 9d6:	80 95       	com	r24
 9d8:	90 95       	com	r25
 9da:	8e 0f       	add	r24, r30
 9dc:	9f 1f       	adc	r25, r31
 9de:	08 95       	ret

000009e0 <strnlen>:
 9e0:	fc 01       	movw	r30, r24
 9e2:	61 50       	subi	r22, 0x01	; 1
 9e4:	70 40       	sbci	r23, 0x00	; 0
 9e6:	01 90       	ld	r0, Z+
 9e8:	01 10       	cpse	r0, r1
 9ea:	d8 f7       	brcc	.-10     	; 0x9e2 <strnlen+0x2>
 9ec:	80 95       	com	r24
 9ee:	90 95       	com	r25
 9f0:	8e 0f       	add	r24, r30
 9f2:	9f 1f       	adc	r25, r31
 9f4:	08 95       	ret

000009f6 <fputc>:
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	fb 01       	movw	r30, r22
 a00:	23 81       	ldd	r18, Z+3	; 0x03
 a02:	21 fd       	sbrc	r18, 1
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <fputc+0x16>
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	9f ef       	ldi	r25, 0xFF	; 255
 a0a:	2c c0       	rjmp	.+88     	; 0xa64 <fputc+0x6e>
 a0c:	22 ff       	sbrs	r18, 2
 a0e:	16 c0       	rjmp	.+44     	; 0xa3c <fputc+0x46>
 a10:	46 81       	ldd	r20, Z+6	; 0x06
 a12:	57 81       	ldd	r21, Z+7	; 0x07
 a14:	24 81       	ldd	r18, Z+4	; 0x04
 a16:	35 81       	ldd	r19, Z+5	; 0x05
 a18:	42 17       	cp	r20, r18
 a1a:	53 07       	cpc	r21, r19
 a1c:	44 f4       	brge	.+16     	; 0xa2e <fputc+0x38>
 a1e:	a0 81       	ld	r26, Z
 a20:	b1 81       	ldd	r27, Z+1	; 0x01
 a22:	9d 01       	movw	r18, r26
 a24:	2f 5f       	subi	r18, 0xFF	; 255
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	31 83       	std	Z+1, r19	; 0x01
 a2a:	20 83       	st	Z, r18
 a2c:	8c 93       	st	X, r24
 a2e:	26 81       	ldd	r18, Z+6	; 0x06
 a30:	37 81       	ldd	r19, Z+7	; 0x07
 a32:	2f 5f       	subi	r18, 0xFF	; 255
 a34:	3f 4f       	sbci	r19, 0xFF	; 255
 a36:	37 83       	std	Z+7, r19	; 0x07
 a38:	26 83       	std	Z+6, r18	; 0x06
 a3a:	14 c0       	rjmp	.+40     	; 0xa64 <fputc+0x6e>
 a3c:	8b 01       	movw	r16, r22
 a3e:	ec 01       	movw	r28, r24
 a40:	fb 01       	movw	r30, r22
 a42:	00 84       	ldd	r0, Z+8	; 0x08
 a44:	f1 85       	ldd	r31, Z+9	; 0x09
 a46:	e0 2d       	mov	r30, r0
 a48:	09 95       	icall
 a4a:	89 2b       	or	r24, r25
 a4c:	e1 f6       	brne	.-72     	; 0xa06 <fputc+0x10>
 a4e:	d8 01       	movw	r26, r16
 a50:	16 96       	adiw	r26, 0x06	; 6
 a52:	8d 91       	ld	r24, X+
 a54:	9c 91       	ld	r25, X
 a56:	17 97       	sbiw	r26, 0x07	; 7
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	17 96       	adiw	r26, 0x07	; 7
 a5c:	9c 93       	st	X, r25
 a5e:	8e 93       	st	-X, r24
 a60:	16 97       	sbiw	r26, 0x06	; 6
 a62:	ce 01       	movw	r24, r28
 a64:	df 91       	pop	r29
 a66:	cf 91       	pop	r28
 a68:	1f 91       	pop	r17
 a6a:	0f 91       	pop	r16
 a6c:	08 95       	ret

00000a6e <__ultoa_invert>:
 a6e:	fa 01       	movw	r30, r20
 a70:	aa 27       	eor	r26, r26
 a72:	28 30       	cpi	r18, 0x08	; 8
 a74:	51 f1       	breq	.+84     	; 0xaca <__ultoa_invert+0x5c>
 a76:	20 31       	cpi	r18, 0x10	; 16
 a78:	81 f1       	breq	.+96     	; 0xada <__ultoa_invert+0x6c>
 a7a:	e8 94       	clt
 a7c:	6f 93       	push	r22
 a7e:	6e 7f       	andi	r22, 0xFE	; 254
 a80:	6e 5f       	subi	r22, 0xFE	; 254
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	af 4f       	sbci	r26, 0xFF	; 255
 a8a:	b1 e0       	ldi	r27, 0x01	; 1
 a8c:	3e d0       	rcall	.+124    	; 0xb0a <__ultoa_invert+0x9c>
 a8e:	b4 e0       	ldi	r27, 0x04	; 4
 a90:	3c d0       	rcall	.+120    	; 0xb0a <__ultoa_invert+0x9c>
 a92:	67 0f       	add	r22, r23
 a94:	78 1f       	adc	r23, r24
 a96:	89 1f       	adc	r24, r25
 a98:	9a 1f       	adc	r25, r26
 a9a:	a1 1d       	adc	r26, r1
 a9c:	68 0f       	add	r22, r24
 a9e:	79 1f       	adc	r23, r25
 aa0:	8a 1f       	adc	r24, r26
 aa2:	91 1d       	adc	r25, r1
 aa4:	a1 1d       	adc	r26, r1
 aa6:	6a 0f       	add	r22, r26
 aa8:	71 1d       	adc	r23, r1
 aaa:	81 1d       	adc	r24, r1
 aac:	91 1d       	adc	r25, r1
 aae:	a1 1d       	adc	r26, r1
 ab0:	20 d0       	rcall	.+64     	; 0xaf2 <__ultoa_invert+0x84>
 ab2:	09 f4       	brne	.+2      	; 0xab6 <__ultoa_invert+0x48>
 ab4:	68 94       	set
 ab6:	3f 91       	pop	r19
 ab8:	2a e0       	ldi	r18, 0x0A	; 10
 aba:	26 9f       	mul	r18, r22
 abc:	11 24       	eor	r1, r1
 abe:	30 19       	sub	r19, r0
 ac0:	30 5d       	subi	r19, 0xD0	; 208
 ac2:	31 93       	st	Z+, r19
 ac4:	de f6       	brtc	.-74     	; 0xa7c <__ultoa_invert+0xe>
 ac6:	cf 01       	movw	r24, r30
 ac8:	08 95       	ret
 aca:	46 2f       	mov	r20, r22
 acc:	47 70       	andi	r20, 0x07	; 7
 ace:	40 5d       	subi	r20, 0xD0	; 208
 ad0:	41 93       	st	Z+, r20
 ad2:	b3 e0       	ldi	r27, 0x03	; 3
 ad4:	0f d0       	rcall	.+30     	; 0xaf4 <__ultoa_invert+0x86>
 ad6:	c9 f7       	brne	.-14     	; 0xaca <__ultoa_invert+0x5c>
 ad8:	f6 cf       	rjmp	.-20     	; 0xac6 <__ultoa_invert+0x58>
 ada:	46 2f       	mov	r20, r22
 adc:	4f 70       	andi	r20, 0x0F	; 15
 ade:	40 5d       	subi	r20, 0xD0	; 208
 ae0:	4a 33       	cpi	r20, 0x3A	; 58
 ae2:	18 f0       	brcs	.+6      	; 0xaea <__ultoa_invert+0x7c>
 ae4:	49 5d       	subi	r20, 0xD9	; 217
 ae6:	31 fd       	sbrc	r19, 1
 ae8:	40 52       	subi	r20, 0x20	; 32
 aea:	41 93       	st	Z+, r20
 aec:	02 d0       	rcall	.+4      	; 0xaf2 <__ultoa_invert+0x84>
 aee:	a9 f7       	brne	.-22     	; 0xada <__ultoa_invert+0x6c>
 af0:	ea cf       	rjmp	.-44     	; 0xac6 <__ultoa_invert+0x58>
 af2:	b4 e0       	ldi	r27, 0x04	; 4
 af4:	a6 95       	lsr	r26
 af6:	97 95       	ror	r25
 af8:	87 95       	ror	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	ba 95       	dec	r27
 b00:	c9 f7       	brne	.-14     	; 0xaf4 <__ultoa_invert+0x86>
 b02:	00 97       	sbiw	r24, 0x00	; 0
 b04:	61 05       	cpc	r22, r1
 b06:	71 05       	cpc	r23, r1
 b08:	08 95       	ret
 b0a:	9b 01       	movw	r18, r22
 b0c:	ac 01       	movw	r20, r24
 b0e:	0a 2e       	mov	r0, r26
 b10:	06 94       	lsr	r0
 b12:	57 95       	ror	r21
 b14:	47 95       	ror	r20
 b16:	37 95       	ror	r19
 b18:	27 95       	ror	r18
 b1a:	ba 95       	dec	r27
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__ultoa_invert+0xa2>
 b1e:	62 0f       	add	r22, r18
 b20:	73 1f       	adc	r23, r19
 b22:	84 1f       	adc	r24, r20
 b24:	95 1f       	adc	r25, r21
 b26:	a0 1d       	adc	r26, r0
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
