
Micro controllers week 2 B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a22  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c8  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a2  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a6  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001fee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	65 c0       	rjmp	.+202    	; 0xd0 <__vector_1>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	42 d0       	rcall	.+132    	; 0x12e <main>
  aa:	71 c0       	rjmp	.+226    	; 0x18e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:

volatile int8_t digit = 0;
volatile int8_t int0, int1;

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	82 17       	cp	r24, r18
  ca:	93 07       	cpc	r25, r19
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <__vector_1>:
		_delay_ms(1);
	}
}

ISR(INT0_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	int0 = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <int0>
	digit++;
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_2>:

ISR(INT1_vect) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	int1 = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <int1>
	digit--;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <display>:

void display(int8_t digit) {
	if(digit < 0 || digit > 15) {
 120:	80 31       	cpi	r24, 0x10	; 16
 122:	18 f0       	brcs	.+6      	; 0x12a <display+0xa>
		PORTC = 0b01111001;
 124:	89 e7       	ldi	r24, 0x79	; 121
 126:	85 bb       	out	0x15, r24	; 21
 128:	08 95       	ret
	}
	else {
		PORTC = digit;
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	08 95       	ret

0000012e <main>:
}

int main(void)
{
	int8_t counterCopy;
	DDRC = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x07;
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	85 bb       	out	0x15, r24	; 21
	
	DDRD = 0x00;
 136:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
 138:	12 ba       	out	0x12, r1	; 18
	
	EICRA = 0x0F;
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x03;
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	89 bf       	out	0x39, r24	; 57
	
	sei();
 144:	78 94       	sei
    while (1) 
    {
		wait(200);
 146:	88 ec       	ldi	r24, 0xC8	; 200
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	b1 df       	rcall	.-158    	; 0xae <wait>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 14c:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			counterCopy = digit;
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 152:	78 94       	sei
		}
		if(int0 && int1) {
 154:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <int0>
 158:	99 23       	and	r25, r25
 15a:	61 f0       	breq	.+24     	; 0x174 <main+0x46>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <int1>
 160:	99 23       	and	r25, r25
 162:	41 f0       	breq	.+16     	; 0x174 <main+0x46>
			digit = 0;
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			counterCopy = 0;
			int0 = 0;
 168:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <int0>
			int1 = 0;
 16c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <int1>
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			counterCopy = digit;
		}
		if(int0 && int1) {
			digit = 0;
			counterCopy = 0;
 170:	80 e0       	ldi	r24, 0x00	; 0
			int0 = 0;
			int1 = 0;
 172:	04 c0       	rjmp	.+8      	; 0x17c <main+0x4e>
		}
		else {
			int0 = 0;
 174:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <int0>
			int1 = 0;
 178:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <int1>
		}
		
		display(counterCopy);
 17c:	d1 df       	rcall	.-94     	; 0x120 <display>
		sleep_mode();
 17e:	85 b7       	in	r24, 0x35	; 53
 180:	80 62       	ori	r24, 0x20	; 32
 182:	85 bf       	out	0x35, r24	; 53
 184:	88 95       	sleep
 186:	85 b7       	in	r24, 0x35	; 53
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	85 bf       	out	0x35, r24	; 53
    }
 18c:	dc cf       	rjmp	.-72     	; 0x146 <main+0x18>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
