
Micro controllers Week 3 B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e97  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e7  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052a  00000000  00000000  00001c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cf  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000470  00000000  00000000  000026ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002b6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	90 d0       	rcall	.+288    	; 0x1d4 <main>
  b4:	aa c0       	rjmp	.+340    	; 0x20a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <togglePinE>:
	writeByte(WRITE_COMMAND, 0x01);
	writeByte(WRITE_COMMAND, 0x02);
} 

static void togglePinE(void) {
	PORTC |= EPIN;
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <togglePinE+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <togglePinE+0xc>
  c4:	00 00       	nop
	_delay_ms(1);
	PORTC &= (~(EPIN));
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <togglePinE+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <togglePinE+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <LCD_Command>:
	_delay_ms(1);
}

static void LCD_Command(uint8_t data) {
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	PORTC = ((data & 0xF0));
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	85 bb       	out	0x15, r24	; 21
	togglePinE();
  de:	ec df       	rcall	.-40     	; 0xb8 <togglePinE>
	
	PORTC = ((data & 0x0F) << 4);
  e0:	20 e1       	ldi	r18, 0x10	; 16
  e2:	c2 9f       	mul	r28, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
	togglePinE();
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	e6 df       	rcall	.-52     	; 0xb8 <togglePinE>
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <init>:
		LCD_Data(data);
	}
}

static void LCD_4bit_mode() {
	PORTC = (0x02 << 4);
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	85 bb       	out	0x15, r24	; 21
	PORTD = PORTC;
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	82 bb       	out	0x12, r24	; 18
	togglePinE();
  f8:	df df       	rcall	.-66     	; 0xb8 <togglePinE>
	togglePinE();
}

static void writeByte(uint8_t operation, uint8_t data) {
	if(operation == WRITE_COMMAND) {
		LCD_Command(data);
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	ec df       	rcall	.-40     	; 0xd6 <LCD_Command>
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	ea df       	rcall	.-44     	; 0xd6 <LCD_Command>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	e8 df       	rcall	.-48     	; 0xd6 <LCD_Command>
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	e6 df       	rcall	.-52     	; 0xd6 <LCD_Command>
	
	//go home
	writeByte(WRITE_COMMAND, 0x02);
	
	//reset output
	PORTC = 0x00;
 10a:	15 ba       	out	0x15, r1	; 21
 10c:	08 95       	ret

0000010e <display_text>:
}

void display_text(char *str) {
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
	//writeByte(WRITE_COMMAND, 0x02);
	for(;*str; str++) {
 114:	fc 01       	movw	r30, r24
 116:	c0 81       	ld	r28, Z
 118:	cc 23       	and	r28, r28
 11a:	a1 f0       	breq	.+40     	; 0x144 <display_text+0x36>
 11c:	8c 01       	movw	r16, r24
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
	PORTC = ((data & 0x0F) << 4);
	togglePinE();
}

static void LCD_Data(uint8_t data) {
	PORTC = ((data & 0xF0));
 122:	8c 2f       	mov	r24, r28
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	85 bb       	out	0x15, r24	; 21
	PORTC |= RSPIN;
 128:	aa 9a       	sbi	0x15, 2	; 21
	togglePinE();
 12a:	c6 df       	rcall	.-116    	; 0xb8 <togglePinE>
	
	PORTC = ((data & 0x0F) << 4);
 12c:	f0 e1       	ldi	r31, 0x10	; 16
 12e:	cf 9f       	mul	r28, r31
 130:	90 01       	movw	r18, r0
 132:	11 24       	eor	r1, r1
 134:	25 bb       	out	0x15, r18	; 21
	PORTC |= RSPIN;
	togglePinE();
 136:	aa 9a       	sbi	0x15, 2	; 21
 138:	bf df       	rcall	.-130    	; 0xb8 <togglePinE>
	PORTC = 0x00;
}

void display_text(char *str) {
	//writeByte(WRITE_COMMAND, 0x02);
	for(;*str; str++) {
 13a:	f8 01       	movw	r30, r16
 13c:	c1 91       	ld	r28, Z+
 13e:	8f 01       	movw	r16, r30
 140:	c1 11       	cpse	r28, r1
 142:	ef cf       	rjmp	.-34     	; 0x122 <display_text+0x14>
		writeByte(WRITE_DATA, *str);
	}
	PORTC = 0x00;
 144:	15 ba       	out	0x15, r1	; 21
}
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <set_cursor>:

void set_cursor(int position) {
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	8c 01       	movw	r16, r24
	togglePinE();
}

static void writeByte(uint8_t operation, uint8_t data) {
	if(operation == WRITE_COMMAND) {
		LCD_Command(data);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	bd df       	rcall	.-134    	; 0xd6 <LCD_Command>
	PORTC = 0x00;
}

void set_cursor(int position) {
	writeByte(WRITE_COMMAND, 0x02);
	for(int i = 0; i < position; i++) {
 15c:	10 16       	cp	r1, r16
 15e:	11 06       	cpc	r1, r17
 160:	44 f4       	brge	.+16     	; 0x172 <set_cursor+0x24>
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
	togglePinE();
}

static void writeByte(uint8_t operation, uint8_t data) {
	if(operation == WRITE_COMMAND) {
		LCD_Command(data);
 166:	84 e1       	ldi	r24, 0x14	; 20
 168:	b6 df       	rcall	.-148    	; 0xd6 <LCD_Command>
	PORTC = 0x00;
}

void set_cursor(int position) {
	writeByte(WRITE_COMMAND, 0x02);
	for(int i = 0; i < position; i++) {
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	0c 17       	cp	r16, r28
 16e:	1d 07       	cpc	r17, r29
 170:	d1 f7       	brne	.-12     	; 0x166 <set_cursor+0x18>
		writeByte(WRITE_COMMAND, 0x14);
	}
	PORTC = 0x00;
 172:	15 ba       	out	0x15, r1	; 21
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <shift_text>:

void shift_text(int position) {
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	for(int i = 0; i < position; i++) {
 186:	18 16       	cp	r1, r24
 188:	19 06       	cpc	r1, r25
 18a:	4c f4       	brge	.+18     	; 0x19e <shift_text+0x20>
 18c:	8c 01       	movw	r16, r24
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
	togglePinE();
}

static void writeByte(uint8_t operation, uint8_t data) {
	if(operation == WRITE_COMMAND) {
		LCD_Command(data);
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	a0 df       	rcall	.-192    	; 0xd6 <LCD_Command>
	}
	PORTC = 0x00;
}

void shift_text(int position) {
	for(int i = 0; i < position; i++) {
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	0c 17       	cp	r16, r28
 19a:	1d 07       	cpc	r17, r29
 19c:	d1 f7       	brne	.-12     	; 0x192 <shift_text+0x14>
		writeByte(WRITE_COMMAND, 0x18);
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <clear_LCD>:
	togglePinE();
}

static void writeByte(uint8_t operation, uint8_t data) {
	if(operation == WRITE_COMMAND) {
		LCD_Command(data);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	95 df       	rcall	.-214    	; 0xd6 <LCD_Command>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	93 cf       	rjmp	.-218    	; 0xd6 <LCD_Command>
 1b0:	08 95       	ret

000001b2 <wait>:
#include <util/delay.h>

#include "lcd.h"

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
 1b2:	18 16       	cp	r1, r24
 1b4:	19 06       	cpc	r1, r25
 1b6:	6c f4       	brge	.+26     	; 0x1d2 <wait+0x20>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	ef ec       	ldi	r30, 0xCF	; 207
 1be:	f7 e0       	ldi	r31, 0x07	; 7
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <wait+0xe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <wait+0x14>
 1c6:	00 00       	nop
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	82 17       	cp	r24, r18
 1ce:	93 07       	cpc	r25, r19
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <wait+0xa>
 1d2:	08 95       	ret

000001d4 <main>:
	}
}

int main(void)
{
	DDRC = 0xFF;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 1d8:	15 ba       	out	0x15, r1	; 21
	
	DDRD = 0xFF;
 1da:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	82 bb       	out	0x12, r24	; 18
	
	init();
 1e0:	87 df       	rcall	.-242    	; 0xf0 <init>
	set_cursor(2);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	b3 df       	rcall	.-154    	; 0x14e <set_cursor>
	display_text("hallo Hallo");
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	90 df       	rcall	.-224    	; 0x10e <display_text>
	wait(2000);
 1ee:	80 ed       	ldi	r24, 0xD0	; 208
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	df df       	rcall	.-66     	; 0x1b2 <wait>
	clear_LCD();
 1f4:	d9 df       	rcall	.-78     	; 0x1a8 <clear_LCD>
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
	display_text("We meet again luke skywalker");
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	89 df       	rcall	.-238    	; 0x10e <display_text>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
	
    while (1) 
    {
		shift_text(1);
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	be df       	rcall	.-132    	; 0x17e <shift_text>
 202:	8a e8       	ldi	r24, 0x8A	; 138
 204:	92 e0       	ldi	r25, 0x02	; 2
		wait(650);
 206:	d5 df       	rcall	.-86     	; 0x1b2 <wait>
 208:	f9 cf       	rjmp	.-14     	; 0x1fc <main+0x28>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
