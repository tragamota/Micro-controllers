
Micro controllers week 3 B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000830  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000256  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	44 c0       	rjmp	.+136    	; 0xae <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2c d0       	rcall	.+88     	; 0x102 <main>
  aa:	5e c0       	rjmp	.+188    	; 0x168 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_9>:
#include <avr/interrupt.h>
#include <util/delay.h>

int msCounter = 0;

ISR(TIMER2_COMP_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
	msCounter++;
	msCounter %= 40;
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	68 e2       	ldi	r22, 0x28	; 40
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	22 d0       	rcall	.+68     	; 0x11a <__divmodhi4>
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(msCounter  < 15) {
  de:	0f 97       	sbiw	r24, 0x0f	; 15
  e0:	14 f4       	brge	.+4      	; 0xe6 <__vector_9+0x38>
		PORTD = 0x00;
  e2:	12 ba       	out	0x12, r1	; 18
  e4:	02 c0       	rjmp	.+4      	; 0xea <__vector_9+0x3c>
	}
	else {
		PORTD = 0x80;
  e6:	80 e8       	ldi	r24, 0x80	; 128
  e8:	82 bb       	out	0x12, r24	; 18
	}
}
  ea:	bf 91       	pop	r27
  ec:	af 91       	pop	r26
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	7f 91       	pop	r23
  f4:	6f 91       	pop	r22
  f6:	5f 91       	pop	r21
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:

int main(void)
{
	DDRD = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 106:	12 ba       	out	0x12, r1	; 18
	
	OCR2 = 125;
 108:	8d e7       	ldi	r24, 0x7D	; 125
 10a:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << 7);
 10c:	87 b7       	in	r24, 0x37	; 55
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b0001011;
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	85 bd       	out	0x25, r24	; 37
	
	sei();
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x16>

0000011a <__divmodhi4>:
 11a:	97 fb       	bst	r25, 7
 11c:	07 2e       	mov	r0, r23
 11e:	16 f4       	brtc	.+4      	; 0x124 <__divmodhi4+0xa>
 120:	00 94       	com	r0
 122:	06 d0       	rcall	.+12     	; 0x130 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	08 d0       	rcall	.+16     	; 0x138 <__divmodhi4_neg2>
 128:	0b d0       	rcall	.+22     	; 0x140 <__udivmodhi4>
 12a:	07 fc       	sbrc	r0, 7
 12c:	05 d0       	rcall	.+10     	; 0x138 <__divmodhi4_neg2>
 12e:	3e f4       	brtc	.+14     	; 0x13e <__divmodhi4_exit>

00000130 <__divmodhi4_neg1>:
 130:	90 95       	com	r25
 132:	81 95       	neg	r24
 134:	9f 4f       	sbci	r25, 0xFF	; 255
 136:	08 95       	ret

00000138 <__divmodhi4_neg2>:
 138:	70 95       	com	r23
 13a:	61 95       	neg	r22
 13c:	7f 4f       	sbci	r23, 0xFF	; 255

0000013e <__divmodhi4_exit>:
 13e:	08 95       	ret

00000140 <__udivmodhi4>:
 140:	aa 1b       	sub	r26, r26
 142:	bb 1b       	sub	r27, r27
 144:	51 e1       	ldi	r21, 0x11	; 17
 146:	07 c0       	rjmp	.+14     	; 0x156 <__udivmodhi4_ep>

00000148 <__udivmodhi4_loop>:
 148:	aa 1f       	adc	r26, r26
 14a:	bb 1f       	adc	r27, r27
 14c:	a6 17       	cp	r26, r22
 14e:	b7 07       	cpc	r27, r23
 150:	10 f0       	brcs	.+4      	; 0x156 <__udivmodhi4_ep>
 152:	a6 1b       	sub	r26, r22
 154:	b7 0b       	sbc	r27, r23

00000156 <__udivmodhi4_ep>:
 156:	88 1f       	adc	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	5a 95       	dec	r21
 15c:	a9 f7       	brne	.-22     	; 0x148 <__udivmodhi4_loop>
 15e:	80 95       	com	r24
 160:	90 95       	com	r25
 162:	bc 01       	movw	r22, r24
 164:	cd 01       	movw	r24, r26
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
